// Code generated by goa v3.19.1, DO NOT EDIT.
//
// workout HTTP client types
//
// Command:
// $ goa gen be/design

package client

import (
	workout "be/gen/workout"

	goa "goa.design/goa/v3/pkg"
)

// CreateRequestBody is the type of the "workout" service "create" endpoint
// HTTP request body.
type CreateRequestBody struct {
	// Name of the workout
	Name string `form:"name" json:"name" xml:"name"`
	// Training Plan ID
	TrainingPlanID string `form:"trainingPlanId" json:"trainingPlanId" xml:"trainingPlanId"`
}

// UpdateRequestBody is the type of the "workout" service "update" endpoint
// HTTP request body.
type UpdateRequestBody struct {
	// Name of the workout
	Name string `form:"name" json:"name" xml:"name"`
	// Training Plan ID
	TrainingPlanID string `form:"trainingPlanId" json:"trainingPlanId" xml:"trainingPlanId"`
}

// CreateResponseBody is the type of the "workout" service "create" endpoint
// HTTP response body.
type CreateResponseBody struct {
	// Unique ID of the workout
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Name of the workout
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Training Plan ID
	TrainingPlanID *string `form:"trainingPlanId,omitempty" json:"trainingPlanId,omitempty" xml:"trainingPlanId,omitempty"`
}

// GetResponseBody is the type of the "workout" service "get" endpoint HTTP
// response body.
type GetResponseBody struct {
	// Unique ID of the workout
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Name of the workout
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Training Plan ID
	TrainingPlanID *string `form:"trainingPlanId,omitempty" json:"trainingPlanId,omitempty" xml:"trainingPlanId,omitempty"`
}

// ListResponseBody is the type of the "workout" service "list" endpoint HTTP
// response body.
type ListResponseBody []*WorkoutResponse

// UpdateResponseBody is the type of the "workout" service "update" endpoint
// HTTP response body.
type UpdateResponseBody struct {
	// Unique ID of the workout
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Name of the workout
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Training Plan ID
	TrainingPlanID *string `form:"trainingPlanId,omitempty" json:"trainingPlanId,omitempty" xml:"trainingPlanId,omitempty"`
}

// WorkoutResponse is used to define fields on response body types.
type WorkoutResponse struct {
	// Unique ID of the workout
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Name of the workout
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Training Plan ID
	TrainingPlanID *string `form:"trainingPlanId,omitempty" json:"trainingPlanId,omitempty" xml:"trainingPlanId,omitempty"`
}

// NewCreateRequestBody builds the HTTP request body from the payload of the
// "create" endpoint of the "workout" service.
func NewCreateRequestBody(p *workout.CreateWorkoutPayload) *CreateRequestBody {
	body := &CreateRequestBody{
		Name:           p.Name,
		TrainingPlanID: p.TrainingPlanID,
	}
	return body
}

// NewUpdateRequestBody builds the HTTP request body from the payload of the
// "update" endpoint of the "workout" service.
func NewUpdateRequestBody(p *workout.UpdateWorkoutPayload) *UpdateRequestBody {
	body := &UpdateRequestBody{
		Name:           p.Name,
		TrainingPlanID: p.TrainingPlanID,
	}
	return body
}

// NewCreateWorkoutCreated builds a "workout" service "create" endpoint result
// from a HTTP "Created" response.
func NewCreateWorkoutCreated(body *CreateResponseBody) *workout.Workout {
	v := &workout.Workout{
		ID:             *body.ID,
		Name:           *body.Name,
		TrainingPlanID: *body.TrainingPlanID,
	}

	return v
}

// NewGetWorkoutOK builds a "workout" service "get" endpoint result from a HTTP
// "OK" response.
func NewGetWorkoutOK(body *GetResponseBody) *workout.Workout {
	v := &workout.Workout{
		ID:             *body.ID,
		Name:           *body.Name,
		TrainingPlanID: *body.TrainingPlanID,
	}

	return v
}

// NewListWorkoutOK builds a "workout" service "list" endpoint result from a
// HTTP "OK" response.
func NewListWorkoutOK(body []*WorkoutResponse) []*workout.Workout {
	v := make([]*workout.Workout, len(body))
	for i, val := range body {
		v[i] = unmarshalWorkoutResponseToWorkoutWorkout(val)
	}

	return v
}

// NewUpdateWorkoutOK builds a "workout" service "update" endpoint result from
// a HTTP "OK" response.
func NewUpdateWorkoutOK(body *UpdateResponseBody) *workout.Workout {
	v := &workout.Workout{
		ID:             *body.ID,
		Name:           *body.Name,
		TrainingPlanID: *body.TrainingPlanID,
	}

	return v
}

// ValidateCreateResponseBody runs the validations defined on CreateResponseBody
func ValidateCreateResponseBody(body *CreateResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.TrainingPlanID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("trainingPlanId", "body"))
	}
	if body.ID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.id", *body.ID, goa.FormatUUID))
	}
	if body.TrainingPlanID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.trainingPlanId", *body.TrainingPlanID, goa.FormatUUID))
	}
	return
}

// ValidateGetResponseBody runs the validations defined on GetResponseBody
func ValidateGetResponseBody(body *GetResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.TrainingPlanID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("trainingPlanId", "body"))
	}
	if body.ID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.id", *body.ID, goa.FormatUUID))
	}
	if body.TrainingPlanID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.trainingPlanId", *body.TrainingPlanID, goa.FormatUUID))
	}
	return
}

// ValidateUpdateResponseBody runs the validations defined on UpdateResponseBody
func ValidateUpdateResponseBody(body *UpdateResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.TrainingPlanID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("trainingPlanId", "body"))
	}
	if body.ID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.id", *body.ID, goa.FormatUUID))
	}
	if body.TrainingPlanID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.trainingPlanId", *body.TrainingPlanID, goa.FormatUUID))
	}
	return
}

// ValidateWorkoutResponse runs the validations defined on WorkoutResponse
func ValidateWorkoutResponse(body *WorkoutResponse) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.TrainingPlanID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("trainingPlanId", "body"))
	}
	if body.ID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.id", *body.ID, goa.FormatUUID))
	}
	if body.TrainingPlanID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.trainingPlanId", *body.TrainingPlanID, goa.FormatUUID))
	}
	return
}
