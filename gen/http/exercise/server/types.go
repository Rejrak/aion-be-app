// Code generated by goa v3.19.1, DO NOT EDIT.
//
// exercise HTTP server types
//
// Command:
// $ goa gen be/design

package server

import (
	exercise "be/gen/exercise"

	goa "goa.design/goa/v3/pkg"
)

// CreateRequestBody is the type of the "exercise" service "create" endpoint
// HTTP request body.
type CreateRequestBody struct {
	// Name of the exercise
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Muscle Group ID
	MuscleGroupID *string `form:"muscleGroupId,omitempty" json:"muscleGroupId,omitempty" xml:"muscleGroupId,omitempty"`
}

// UpdateRequestBody is the type of the "exercise" service "update" endpoint
// HTTP request body.
type UpdateRequestBody struct {
	// Name of the exercise
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Muscle Group ID
	MuscleGroupID *string `form:"muscleGroupId,omitempty" json:"muscleGroupId,omitempty" xml:"muscleGroupId,omitempty"`
}

// CreateResponseBody is the type of the "exercise" service "create" endpoint
// HTTP response body.
type CreateResponseBody struct {
	// Unique ID of the exercise
	ID string `form:"id" json:"id" xml:"id"`
	// Name of the exercise
	Name string `form:"name" json:"name" xml:"name"`
	// Muscle Group ID
	MuscleGroupID string `form:"muscleGroupId" json:"muscleGroupId" xml:"muscleGroupId"`
}

// GetResponseBody is the type of the "exercise" service "get" endpoint HTTP
// response body.
type GetResponseBody struct {
	// Unique ID of the exercise
	ID string `form:"id" json:"id" xml:"id"`
	// Name of the exercise
	Name string `form:"name" json:"name" xml:"name"`
	// Muscle Group ID
	MuscleGroupID string `form:"muscleGroupId" json:"muscleGroupId" xml:"muscleGroupId"`
}

// ListResponseBody is the type of the "exercise" service "list" endpoint HTTP
// response body.
type ListResponseBody []*ExerciseResponse

// UpdateResponseBody is the type of the "exercise" service "update" endpoint
// HTTP response body.
type UpdateResponseBody struct {
	// Unique ID of the exercise
	ID string `form:"id" json:"id" xml:"id"`
	// Name of the exercise
	Name string `form:"name" json:"name" xml:"name"`
	// Muscle Group ID
	MuscleGroupID string `form:"muscleGroupId" json:"muscleGroupId" xml:"muscleGroupId"`
}

// ExerciseResponse is used to define fields on response body types.
type ExerciseResponse struct {
	// Unique ID of the exercise
	ID string `form:"id" json:"id" xml:"id"`
	// Name of the exercise
	Name string `form:"name" json:"name" xml:"name"`
	// Muscle Group ID
	MuscleGroupID string `form:"muscleGroupId" json:"muscleGroupId" xml:"muscleGroupId"`
}

// NewCreateResponseBody builds the HTTP response body from the result of the
// "create" endpoint of the "exercise" service.
func NewCreateResponseBody(res *exercise.Exercise) *CreateResponseBody {
	body := &CreateResponseBody{
		ID:            res.ID,
		Name:          res.Name,
		MuscleGroupID: res.MuscleGroupID,
	}
	return body
}

// NewGetResponseBody builds the HTTP response body from the result of the
// "get" endpoint of the "exercise" service.
func NewGetResponseBody(res *exercise.Exercise) *GetResponseBody {
	body := &GetResponseBody{
		ID:            res.ID,
		Name:          res.Name,
		MuscleGroupID: res.MuscleGroupID,
	}
	return body
}

// NewListResponseBody builds the HTTP response body from the result of the
// "list" endpoint of the "exercise" service.
func NewListResponseBody(res []*exercise.Exercise) ListResponseBody {
	body := make([]*ExerciseResponse, len(res))
	for i, val := range res {
		body[i] = marshalExerciseExerciseToExerciseResponse(val)
	}
	return body
}

// NewUpdateResponseBody builds the HTTP response body from the result of the
// "update" endpoint of the "exercise" service.
func NewUpdateResponseBody(res *exercise.Exercise) *UpdateResponseBody {
	body := &UpdateResponseBody{
		ID:            res.ID,
		Name:          res.Name,
		MuscleGroupID: res.MuscleGroupID,
	}
	return body
}

// NewCreateExercisePayload builds a exercise service create endpoint payload.
func NewCreateExercisePayload(body *CreateRequestBody) *exercise.CreateExercisePayload {
	v := &exercise.CreateExercisePayload{
		Name:          *body.Name,
		MuscleGroupID: *body.MuscleGroupID,
	}

	return v
}

// NewGetPayload builds a exercise service get endpoint payload.
func NewGetPayload(id string) *exercise.GetPayload {
	v := &exercise.GetPayload{}
	v.ID = id

	return v
}

// NewListPayload builds a exercise service list endpoint payload.
func NewListPayload(limit int, offset int) *exercise.ListPayload {
	v := &exercise.ListPayload{}
	v.Limit = limit
	v.Offset = offset

	return v
}

// NewUpdateExercisePayload builds a exercise service update endpoint payload.
func NewUpdateExercisePayload(body *UpdateRequestBody, id string) *exercise.UpdateExercisePayload {
	v := &exercise.UpdateExercisePayload{
		Name:          *body.Name,
		MuscleGroupID: *body.MuscleGroupID,
	}
	v.ID = id

	return v
}

// NewDeletePayload builds a exercise service delete endpoint payload.
func NewDeletePayload(id string) *exercise.DeletePayload {
	v := &exercise.DeletePayload{}
	v.ID = id

	return v
}

// ValidateCreateRequestBody runs the validations defined on CreateRequestBody
func ValidateCreateRequestBody(body *CreateRequestBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.MuscleGroupID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("muscleGroupId", "body"))
	}
	if body.MuscleGroupID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.muscleGroupId", *body.MuscleGroupID, goa.FormatUUID))
	}
	return
}

// ValidateUpdateRequestBody runs the validations defined on UpdateRequestBody
func ValidateUpdateRequestBody(body *UpdateRequestBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.MuscleGroupID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("muscleGroupId", "body"))
	}
	if body.MuscleGroupID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.muscleGroupId", *body.MuscleGroupID, goa.FormatUUID))
	}
	return
}
