// Code generated by goa v3.19.1, DO NOT EDIT.
//
// exercise HTTP client types
//
// Command:
// $ goa gen be/design

package client

import (
	exercise "be/gen/exercise"

	goa "goa.design/goa/v3/pkg"
)

// CreateRequestBody is the type of the "exercise" service "create" endpoint
// HTTP request body.
type CreateRequestBody struct {
	// Name of the exercise
	Name string `form:"name" json:"name" xml:"name"`
	// Muscle Group ID
	MuscleGroupID string `form:"muscleGroupId" json:"muscleGroupId" xml:"muscleGroupId"`
}

// UpdateRequestBody is the type of the "exercise" service "update" endpoint
// HTTP request body.
type UpdateRequestBody struct {
	// Name of the exercise
	Name string `form:"name" json:"name" xml:"name"`
	// Muscle Group ID
	MuscleGroupID string `form:"muscleGroupId" json:"muscleGroupId" xml:"muscleGroupId"`
}

// CreateResponseBody is the type of the "exercise" service "create" endpoint
// HTTP response body.
type CreateResponseBody struct {
	// Unique ID of the exercise
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Name of the exercise
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Muscle Group ID
	MuscleGroupID *string `form:"muscleGroupId,omitempty" json:"muscleGroupId,omitempty" xml:"muscleGroupId,omitempty"`
}

// GetResponseBody is the type of the "exercise" service "get" endpoint HTTP
// response body.
type GetResponseBody struct {
	// Unique ID of the exercise
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Name of the exercise
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Muscle Group ID
	MuscleGroupID *string `form:"muscleGroupId,omitempty" json:"muscleGroupId,omitempty" xml:"muscleGroupId,omitempty"`
}

// ListResponseBody is the type of the "exercise" service "list" endpoint HTTP
// response body.
type ListResponseBody []*ExerciseResponse

// UpdateResponseBody is the type of the "exercise" service "update" endpoint
// HTTP response body.
type UpdateResponseBody struct {
	// Unique ID of the exercise
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Name of the exercise
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Muscle Group ID
	MuscleGroupID *string `form:"muscleGroupId,omitempty" json:"muscleGroupId,omitempty" xml:"muscleGroupId,omitempty"`
}

// ExerciseResponse is used to define fields on response body types.
type ExerciseResponse struct {
	// Unique ID of the exercise
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Name of the exercise
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Muscle Group ID
	MuscleGroupID *string `form:"muscleGroupId,omitempty" json:"muscleGroupId,omitempty" xml:"muscleGroupId,omitempty"`
}

// NewCreateRequestBody builds the HTTP request body from the payload of the
// "create" endpoint of the "exercise" service.
func NewCreateRequestBody(p *exercise.CreateExercisePayload) *CreateRequestBody {
	body := &CreateRequestBody{
		Name:          p.Name,
		MuscleGroupID: p.MuscleGroupID,
	}
	return body
}

// NewUpdateRequestBody builds the HTTP request body from the payload of the
// "update" endpoint of the "exercise" service.
func NewUpdateRequestBody(p *exercise.UpdateExercisePayload) *UpdateRequestBody {
	body := &UpdateRequestBody{
		Name:          p.Name,
		MuscleGroupID: p.MuscleGroupID,
	}
	return body
}

// NewCreateExerciseCreated builds a "exercise" service "create" endpoint
// result from a HTTP "Created" response.
func NewCreateExerciseCreated(body *CreateResponseBody) *exercise.Exercise {
	v := &exercise.Exercise{
		ID:            *body.ID,
		Name:          *body.Name,
		MuscleGroupID: *body.MuscleGroupID,
	}

	return v
}

// NewGetExerciseOK builds a "exercise" service "get" endpoint result from a
// HTTP "OK" response.
func NewGetExerciseOK(body *GetResponseBody) *exercise.Exercise {
	v := &exercise.Exercise{
		ID:            *body.ID,
		Name:          *body.Name,
		MuscleGroupID: *body.MuscleGroupID,
	}

	return v
}

// NewListExerciseOK builds a "exercise" service "list" endpoint result from a
// HTTP "OK" response.
func NewListExerciseOK(body []*ExerciseResponse) []*exercise.Exercise {
	v := make([]*exercise.Exercise, len(body))
	for i, val := range body {
		v[i] = unmarshalExerciseResponseToExerciseExercise(val)
	}

	return v
}

// NewUpdateExerciseOK builds a "exercise" service "update" endpoint result
// from a HTTP "OK" response.
func NewUpdateExerciseOK(body *UpdateResponseBody) *exercise.Exercise {
	v := &exercise.Exercise{
		ID:            *body.ID,
		Name:          *body.Name,
		MuscleGroupID: *body.MuscleGroupID,
	}

	return v
}

// ValidateCreateResponseBody runs the validations defined on CreateResponseBody
func ValidateCreateResponseBody(body *CreateResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.MuscleGroupID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("muscleGroupId", "body"))
	}
	if body.ID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.id", *body.ID, goa.FormatUUID))
	}
	if body.MuscleGroupID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.muscleGroupId", *body.MuscleGroupID, goa.FormatUUID))
	}
	return
}

// ValidateGetResponseBody runs the validations defined on GetResponseBody
func ValidateGetResponseBody(body *GetResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.MuscleGroupID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("muscleGroupId", "body"))
	}
	if body.ID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.id", *body.ID, goa.FormatUUID))
	}
	if body.MuscleGroupID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.muscleGroupId", *body.MuscleGroupID, goa.FormatUUID))
	}
	return
}

// ValidateUpdateResponseBody runs the validations defined on UpdateResponseBody
func ValidateUpdateResponseBody(body *UpdateResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.MuscleGroupID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("muscleGroupId", "body"))
	}
	if body.ID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.id", *body.ID, goa.FormatUUID))
	}
	if body.MuscleGroupID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.muscleGroupId", *body.MuscleGroupID, goa.FormatUUID))
	}
	return
}

// ValidateExerciseResponse runs the validations defined on ExerciseResponse
func ValidateExerciseResponse(body *ExerciseResponse) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.MuscleGroupID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("muscleGroupId", "body"))
	}
	if body.ID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.id", *body.ID, goa.FormatUUID))
	}
	if body.MuscleGroupID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.muscleGroupId", *body.MuscleGroupID, goa.FormatUUID))
	}
	return
}
