// Code generated by goa v3.19.1, DO NOT EDIT.
//
// workouttype HTTP client CLI support package
//
// Command:
// $ goa gen be/design

package client

import (
	workouttype "be/gen/workouttype"
	"encoding/json"
	"fmt"
	"strconv"

	goa "goa.design/goa/v3/pkg"
)

// BuildCreatePayload builds the payload for the workouttype create endpoint
// from CLI flags.
func BuildCreatePayload(workouttypeCreateBody string) (*workouttype.CreateWorkoutTypePayload, error) {
	var err error
	var body CreateRequestBody
	{
		err = json.Unmarshal([]byte(workouttypeCreateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"description\": \"Workout type focused on strength training\",\n      \"name\": \"Strength\"\n   }'")
		}
	}
	v := &workouttype.CreateWorkoutTypePayload{
		Name:        body.Name,
		Description: body.Description,
	}

	return v, nil
}

// BuildGetPayload builds the payload for the workouttype get endpoint from CLI
// flags.
func BuildGetPayload(workouttypeGetID string) (*workouttype.GetPayload, error) {
	var err error
	var id string
	{
		id = workouttypeGetID
		err = goa.MergeErrors(err, goa.ValidateFormat("id", id, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	v := &workouttype.GetPayload{}
	v.ID = id

	return v, nil
}

// BuildListPayload builds the payload for the workouttype list endpoint from
// CLI flags.
func BuildListPayload(workouttypeListLimit string, workouttypeListOffset string) (*workouttype.ListPayload, error) {
	var err error
	var limit int
	{
		if workouttypeListLimit != "" {
			var v int64
			v, err = strconv.ParseInt(workouttypeListLimit, 10, strconv.IntSize)
			limit = int(v)
			if err != nil {
				return nil, fmt.Errorf("invalid value for limit, must be INT")
			}
			if limit < 1 {
				err = goa.MergeErrors(err, goa.InvalidRangeError("limit", limit, 1, true))
			}
			if limit > 100 {
				err = goa.MergeErrors(err, goa.InvalidRangeError("limit", limit, 100, false))
			}
			if err != nil {
				return nil, err
			}
		}
	}
	var offset int
	{
		if workouttypeListOffset != "" {
			var v int64
			v, err = strconv.ParseInt(workouttypeListOffset, 10, strconv.IntSize)
			offset = int(v)
			if err != nil {
				return nil, fmt.Errorf("invalid value for offset, must be INT")
			}
			if offset < 0 {
				err = goa.MergeErrors(err, goa.InvalidRangeError("offset", offset, 0, true))
			}
			if err != nil {
				return nil, err
			}
		}
	}
	v := &workouttype.ListPayload{}
	v.Limit = limit
	v.Offset = offset

	return v, nil
}

// BuildUpdatePayload builds the payload for the workouttype update endpoint
// from CLI flags.
func BuildUpdatePayload(workouttypeUpdateBody string, workouttypeUpdateID string) (*workouttype.UpdateWorkoutTypePayload, error) {
	var err error
	var body UpdateRequestBody
	{
		err = json.Unmarshal([]byte(workouttypeUpdateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"description\": \"Updated description\",\n      \"name\": \"Strength Updated\"\n   }'")
		}
	}
	var id string
	{
		id = workouttypeUpdateID
		err = goa.MergeErrors(err, goa.ValidateFormat("id", id, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	v := &workouttype.UpdateWorkoutTypePayload{
		Name:        body.Name,
		Description: body.Description,
	}
	v.ID = id

	return v, nil
}

// BuildDeletePayload builds the payload for the workouttype delete endpoint
// from CLI flags.
func BuildDeletePayload(workouttypeDeleteID string) (*workouttype.DeletePayload, error) {
	var err error
	var id string
	{
		id = workouttypeDeleteID
		err = goa.MergeErrors(err, goa.ValidateFormat("id", id, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	v := &workouttype.DeletePayload{}
	v.ID = id

	return v, nil
}
