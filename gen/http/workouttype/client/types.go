// Code generated by goa v3.19.1, DO NOT EDIT.
//
// workouttype HTTP client types
//
// Command:
// $ goa gen be/design

package client

import (
	workouttype "be/gen/workouttype"

	goa "goa.design/goa/v3/pkg"
)

// CreateRequestBody is the type of the "workouttype" service "create" endpoint
// HTTP request body.
type CreateRequestBody struct {
	// Name of the workout type
	Name string `form:"name" json:"name" xml:"name"`
	// Description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
}

// UpdateRequestBody is the type of the "workouttype" service "update" endpoint
// HTTP request body.
type UpdateRequestBody struct {
	// Name of the workout type
	Name string `form:"name" json:"name" xml:"name"`
	// Description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
}

// CreateResponseBody is the type of the "workouttype" service "create"
// endpoint HTTP response body.
type CreateResponseBody struct {
	// Unique ID of the workout type
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Name of the workout type
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
}

// GetResponseBody is the type of the "workouttype" service "get" endpoint HTTP
// response body.
type GetResponseBody struct {
	// Unique ID of the workout type
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Name of the workout type
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
}

// ListResponseBody is the type of the "workouttype" service "list" endpoint
// HTTP response body.
type ListResponseBody []*WorkoutTypeResponse

// UpdateResponseBody is the type of the "workouttype" service "update"
// endpoint HTTP response body.
type UpdateResponseBody struct {
	// Unique ID of the workout type
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Name of the workout type
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
}

// WorkoutTypeResponse is used to define fields on response body types.
type WorkoutTypeResponse struct {
	// Unique ID of the workout type
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Name of the workout type
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
}

// NewCreateRequestBody builds the HTTP request body from the payload of the
// "create" endpoint of the "workouttype" service.
func NewCreateRequestBody(p *workouttype.CreateWorkoutTypePayload) *CreateRequestBody {
	body := &CreateRequestBody{
		Name:        p.Name,
		Description: p.Description,
	}
	return body
}

// NewUpdateRequestBody builds the HTTP request body from the payload of the
// "update" endpoint of the "workouttype" service.
func NewUpdateRequestBody(p *workouttype.UpdateWorkoutTypePayload) *UpdateRequestBody {
	body := &UpdateRequestBody{
		Name:        p.Name,
		Description: p.Description,
	}
	return body
}

// NewCreateWorkoutTypeCreated builds a "workouttype" service "create" endpoint
// result from a HTTP "Created" response.
func NewCreateWorkoutTypeCreated(body *CreateResponseBody) *workouttype.WorkoutType {
	v := &workouttype.WorkoutType{
		ID:          *body.ID,
		Name:        *body.Name,
		Description: body.Description,
	}

	return v
}

// NewGetWorkoutTypeOK builds a "workouttype" service "get" endpoint result
// from a HTTP "OK" response.
func NewGetWorkoutTypeOK(body *GetResponseBody) *workouttype.WorkoutType {
	v := &workouttype.WorkoutType{
		ID:          *body.ID,
		Name:        *body.Name,
		Description: body.Description,
	}

	return v
}

// NewListWorkoutTypeOK builds a "workouttype" service "list" endpoint result
// from a HTTP "OK" response.
func NewListWorkoutTypeOK(body []*WorkoutTypeResponse) []*workouttype.WorkoutType {
	v := make([]*workouttype.WorkoutType, len(body))
	for i, val := range body {
		v[i] = unmarshalWorkoutTypeResponseToWorkouttypeWorkoutType(val)
	}

	return v
}

// NewUpdateWorkoutTypeOK builds a "workouttype" service "update" endpoint
// result from a HTTP "OK" response.
func NewUpdateWorkoutTypeOK(body *UpdateResponseBody) *workouttype.WorkoutType {
	v := &workouttype.WorkoutType{
		ID:          *body.ID,
		Name:        *body.Name,
		Description: body.Description,
	}

	return v
}

// ValidateCreateResponseBody runs the validations defined on CreateResponseBody
func ValidateCreateResponseBody(body *CreateResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.id", *body.ID, goa.FormatUUID))
	}
	return
}

// ValidateGetResponseBody runs the validations defined on GetResponseBody
func ValidateGetResponseBody(body *GetResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.id", *body.ID, goa.FormatUUID))
	}
	return
}

// ValidateUpdateResponseBody runs the validations defined on UpdateResponseBody
func ValidateUpdateResponseBody(body *UpdateResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.id", *body.ID, goa.FormatUUID))
	}
	return
}

// ValidateWorkoutTypeResponse runs the validations defined on
// WorkoutTypeResponse
func ValidateWorkoutTypeResponse(body *WorkoutTypeResponse) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.id", *body.ID, goa.FormatUUID))
	}
	return
}
