// Code generated by goa v3.19.1, DO NOT EDIT.
//
// musclegroup HTTP client CLI support package
//
// Command:
// $ goa gen be/design

package client

import (
	musclegroup "be/gen/musclegroup"
	"encoding/json"
	"fmt"
	"strconv"

	goa "goa.design/goa/v3/pkg"
)

// BuildCreatePayload builds the payload for the musclegroup create endpoint
// from CLI flags.
func BuildCreatePayload(musclegroupCreateBody string) (*musclegroup.CreateMuscleGroupPayload, error) {
	var err error
	var body CreateRequestBody
	{
		err = json.Unmarshal([]byte(musclegroupCreateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"description\": \"Group for chest exercises\",\n      \"name\": \"Chest\"\n   }'")
		}
	}
	v := &musclegroup.CreateMuscleGroupPayload{
		Name:        body.Name,
		Description: body.Description,
	}

	return v, nil
}

// BuildGetPayload builds the payload for the musclegroup get endpoint from CLI
// flags.
func BuildGetPayload(musclegroupGetID string) (*musclegroup.GetPayload, error) {
	var err error
	var id string
	{
		id = musclegroupGetID
		err = goa.MergeErrors(err, goa.ValidateFormat("id", id, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	v := &musclegroup.GetPayload{}
	v.ID = id

	return v, nil
}

// BuildListPayload builds the payload for the musclegroup list endpoint from
// CLI flags.
func BuildListPayload(musclegroupListLimit string, musclegroupListOffset string) (*musclegroup.ListPayload, error) {
	var err error
	var limit int
	{
		if musclegroupListLimit != "" {
			var v int64
			v, err = strconv.ParseInt(musclegroupListLimit, 10, strconv.IntSize)
			limit = int(v)
			if err != nil {
				return nil, fmt.Errorf("invalid value for limit, must be INT")
			}
			if limit < 1 {
				err = goa.MergeErrors(err, goa.InvalidRangeError("limit", limit, 1, true))
			}
			if limit > 100 {
				err = goa.MergeErrors(err, goa.InvalidRangeError("limit", limit, 100, false))
			}
			if err != nil {
				return nil, err
			}
		}
	}
	var offset int
	{
		if musclegroupListOffset != "" {
			var v int64
			v, err = strconv.ParseInt(musclegroupListOffset, 10, strconv.IntSize)
			offset = int(v)
			if err != nil {
				return nil, fmt.Errorf("invalid value for offset, must be INT")
			}
			if offset < 0 {
				err = goa.MergeErrors(err, goa.InvalidRangeError("offset", offset, 0, true))
			}
			if err != nil {
				return nil, err
			}
		}
	}
	v := &musclegroup.ListPayload{}
	v.Limit = limit
	v.Offset = offset

	return v, nil
}

// BuildUpdatePayload builds the payload for the musclegroup update endpoint
// from CLI flags.
func BuildUpdatePayload(musclegroupUpdateBody string, musclegroupUpdateID string) (*musclegroup.UpdateMuscleGroupPayload, error) {
	var err error
	var body UpdateRequestBody
	{
		err = json.Unmarshal([]byte(musclegroupUpdateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"description\": \"Updated description\",\n      \"name\": \"Chest Updated\"\n   }'")
		}
	}
	var id string
	{
		id = musclegroupUpdateID
		err = goa.MergeErrors(err, goa.ValidateFormat("id", id, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	v := &musclegroup.UpdateMuscleGroupPayload{
		Name:        body.Name,
		Description: body.Description,
	}
	v.ID = id

	return v, nil
}

// BuildDeletePayload builds the payload for the musclegroup delete endpoint
// from CLI flags.
func BuildDeletePayload(musclegroupDeleteID string) (*musclegroup.DeletePayload, error) {
	var err error
	var id string
	{
		id = musclegroupDeleteID
		err = goa.MergeErrors(err, goa.ValidateFormat("id", id, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	v := &musclegroup.DeletePayload{}
	v.ID = id

	return v, nil
}
