// Code generated by goa v3.19.1, DO NOT EDIT.
//
// workoutprogress HTTP client types
//
// Command:
// $ goa gen be/design

package client

import (
	workoutprogress "be/gen/workoutprogress"

	goa "goa.design/goa/v3/pkg"
)

// CreateRequestBody is the type of the "workoutprogress" service "create"
// endpoint HTTP request body.
type CreateRequestBody struct {
	// Workout ID
	WorkoutID string `form:"workoutId" json:"workoutId" xml:"workoutId"`
	// User ID
	UserID string `form:"userId" json:"userId" xml:"userId"`
	// Date of the workout progress
	Date string `form:"date" json:"date" xml:"date"`
}

// UpdateRequestBody is the type of the "workoutprogress" service "update"
// endpoint HTTP request body.
type UpdateRequestBody struct {
	// Date of the workout progress
	Date string `form:"date" json:"date" xml:"date"`
}

// CreateResponseBody is the type of the "workoutprogress" service "create"
// endpoint HTTP response body.
type CreateResponseBody struct {
	// Unique ID of the workout progress
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Workout ID
	WorkoutID *string `form:"workoutId,omitempty" json:"workoutId,omitempty" xml:"workoutId,omitempty"`
	// User ID
	UserID *string `form:"userId,omitempty" json:"userId,omitempty" xml:"userId,omitempty"`
	// Date of the workout progress
	Date *string `form:"date,omitempty" json:"date,omitempty" xml:"date,omitempty"`
}

// GetResponseBody is the type of the "workoutprogress" service "get" endpoint
// HTTP response body.
type GetResponseBody struct {
	// Unique ID of the workout progress
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Workout ID
	WorkoutID *string `form:"workoutId,omitempty" json:"workoutId,omitempty" xml:"workoutId,omitempty"`
	// User ID
	UserID *string `form:"userId,omitempty" json:"userId,omitempty" xml:"userId,omitempty"`
	// Date of the workout progress
	Date *string `form:"date,omitempty" json:"date,omitempty" xml:"date,omitempty"`
}

// ListResponseBody is the type of the "workoutprogress" service "list"
// endpoint HTTP response body.
type ListResponseBody []*WorkoutProgressResponse

// UpdateResponseBody is the type of the "workoutprogress" service "update"
// endpoint HTTP response body.
type UpdateResponseBody struct {
	// Unique ID of the workout progress
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Workout ID
	WorkoutID *string `form:"workoutId,omitempty" json:"workoutId,omitempty" xml:"workoutId,omitempty"`
	// User ID
	UserID *string `form:"userId,omitempty" json:"userId,omitempty" xml:"userId,omitempty"`
	// Date of the workout progress
	Date *string `form:"date,omitempty" json:"date,omitempty" xml:"date,omitempty"`
}

// WorkoutProgressResponse is used to define fields on response body types.
type WorkoutProgressResponse struct {
	// Unique ID of the workout progress
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Workout ID
	WorkoutID *string `form:"workoutId,omitempty" json:"workoutId,omitempty" xml:"workoutId,omitempty"`
	// User ID
	UserID *string `form:"userId,omitempty" json:"userId,omitempty" xml:"userId,omitempty"`
	// Date of the workout progress
	Date *string `form:"date,omitempty" json:"date,omitempty" xml:"date,omitempty"`
}

// NewCreateRequestBody builds the HTTP request body from the payload of the
// "create" endpoint of the "workoutprogress" service.
func NewCreateRequestBody(p *workoutprogress.CreateWorkoutProgressPayload) *CreateRequestBody {
	body := &CreateRequestBody{
		WorkoutID: p.WorkoutID,
		UserID:    p.UserID,
		Date:      p.Date,
	}
	return body
}

// NewUpdateRequestBody builds the HTTP request body from the payload of the
// "update" endpoint of the "workoutprogress" service.
func NewUpdateRequestBody(p *workoutprogress.UpdateWorkoutProgressPayload) *UpdateRequestBody {
	body := &UpdateRequestBody{
		Date: p.Date,
	}
	return body
}

// NewCreateWorkoutProgressCreated builds a "workoutprogress" service "create"
// endpoint result from a HTTP "Created" response.
func NewCreateWorkoutProgressCreated(body *CreateResponseBody) *workoutprogress.WorkoutProgress {
	v := &workoutprogress.WorkoutProgress{
		ID:        *body.ID,
		WorkoutID: *body.WorkoutID,
		UserID:    *body.UserID,
		Date:      *body.Date,
	}

	return v
}

// NewGetWorkoutProgressOK builds a "workoutprogress" service "get" endpoint
// result from a HTTP "OK" response.
func NewGetWorkoutProgressOK(body *GetResponseBody) *workoutprogress.WorkoutProgress {
	v := &workoutprogress.WorkoutProgress{
		ID:        *body.ID,
		WorkoutID: *body.WorkoutID,
		UserID:    *body.UserID,
		Date:      *body.Date,
	}

	return v
}

// NewListWorkoutProgressOK builds a "workoutprogress" service "list" endpoint
// result from a HTTP "OK" response.
func NewListWorkoutProgressOK(body []*WorkoutProgressResponse) []*workoutprogress.WorkoutProgress {
	v := make([]*workoutprogress.WorkoutProgress, len(body))
	for i, val := range body {
		v[i] = unmarshalWorkoutProgressResponseToWorkoutprogressWorkoutProgress(val)
	}

	return v
}

// NewUpdateWorkoutProgressOK builds a "workoutprogress" service "update"
// endpoint result from a HTTP "OK" response.
func NewUpdateWorkoutProgressOK(body *UpdateResponseBody) *workoutprogress.WorkoutProgress {
	v := &workoutprogress.WorkoutProgress{
		ID:        *body.ID,
		WorkoutID: *body.WorkoutID,
		UserID:    *body.UserID,
		Date:      *body.Date,
	}

	return v
}

// ValidateCreateResponseBody runs the validations defined on CreateResponseBody
func ValidateCreateResponseBody(body *CreateResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.WorkoutID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("workoutId", "body"))
	}
	if body.UserID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("userId", "body"))
	}
	if body.Date == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("date", "body"))
	}
	if body.ID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.id", *body.ID, goa.FormatUUID))
	}
	if body.WorkoutID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.workoutId", *body.WorkoutID, goa.FormatUUID))
	}
	if body.UserID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.userId", *body.UserID, goa.FormatUUID))
	}
	if body.Date != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.date", *body.Date, goa.FormatDateTime))
	}
	return
}

// ValidateGetResponseBody runs the validations defined on GetResponseBody
func ValidateGetResponseBody(body *GetResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.WorkoutID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("workoutId", "body"))
	}
	if body.UserID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("userId", "body"))
	}
	if body.Date == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("date", "body"))
	}
	if body.ID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.id", *body.ID, goa.FormatUUID))
	}
	if body.WorkoutID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.workoutId", *body.WorkoutID, goa.FormatUUID))
	}
	if body.UserID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.userId", *body.UserID, goa.FormatUUID))
	}
	if body.Date != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.date", *body.Date, goa.FormatDateTime))
	}
	return
}

// ValidateUpdateResponseBody runs the validations defined on UpdateResponseBody
func ValidateUpdateResponseBody(body *UpdateResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.WorkoutID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("workoutId", "body"))
	}
	if body.UserID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("userId", "body"))
	}
	if body.Date == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("date", "body"))
	}
	if body.ID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.id", *body.ID, goa.FormatUUID))
	}
	if body.WorkoutID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.workoutId", *body.WorkoutID, goa.FormatUUID))
	}
	if body.UserID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.userId", *body.UserID, goa.FormatUUID))
	}
	if body.Date != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.date", *body.Date, goa.FormatDateTime))
	}
	return
}

// ValidateWorkoutProgressResponse runs the validations defined on
// WorkoutProgressResponse
func ValidateWorkoutProgressResponse(body *WorkoutProgressResponse) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.WorkoutID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("workoutId", "body"))
	}
	if body.UserID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("userId", "body"))
	}
	if body.Date == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("date", "body"))
	}
	if body.ID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.id", *body.ID, goa.FormatUUID))
	}
	if body.WorkoutID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.workoutId", *body.WorkoutID, goa.FormatUUID))
	}
	if body.UserID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.userId", *body.UserID, goa.FormatUUID))
	}
	if body.Date != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.date", *body.Date, goa.FormatDateTime))
	}
	return
}
