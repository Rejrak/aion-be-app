// Code generated by goa v3.19.1, DO NOT EDIT.
//
// workoutprogress HTTP server types
//
// Command:
// $ goa gen be/design

package server

import (
	workoutprogress "be/gen/workoutprogress"

	goa "goa.design/goa/v3/pkg"
)

// CreateRequestBody is the type of the "workoutprogress" service "create"
// endpoint HTTP request body.
type CreateRequestBody struct {
	// Workout ID
	WorkoutID *string `form:"workoutId,omitempty" json:"workoutId,omitempty" xml:"workoutId,omitempty"`
	// User ID
	UserID *string `form:"userId,omitempty" json:"userId,omitempty" xml:"userId,omitempty"`
	// Date of the workout progress
	Date *string `form:"date,omitempty" json:"date,omitempty" xml:"date,omitempty"`
}

// UpdateRequestBody is the type of the "workoutprogress" service "update"
// endpoint HTTP request body.
type UpdateRequestBody struct {
	// Date of the workout progress
	Date *string `form:"date,omitempty" json:"date,omitempty" xml:"date,omitempty"`
}

// CreateResponseBody is the type of the "workoutprogress" service "create"
// endpoint HTTP response body.
type CreateResponseBody struct {
	// Unique ID of the workout progress
	ID string `form:"id" json:"id" xml:"id"`
	// Workout ID
	WorkoutID string `form:"workoutId" json:"workoutId" xml:"workoutId"`
	// User ID
	UserID string `form:"userId" json:"userId" xml:"userId"`
	// Date of the workout progress
	Date string `form:"date" json:"date" xml:"date"`
}

// GetResponseBody is the type of the "workoutprogress" service "get" endpoint
// HTTP response body.
type GetResponseBody struct {
	// Unique ID of the workout progress
	ID string `form:"id" json:"id" xml:"id"`
	// Workout ID
	WorkoutID string `form:"workoutId" json:"workoutId" xml:"workoutId"`
	// User ID
	UserID string `form:"userId" json:"userId" xml:"userId"`
	// Date of the workout progress
	Date string `form:"date" json:"date" xml:"date"`
}

// ListResponseBody is the type of the "workoutprogress" service "list"
// endpoint HTTP response body.
type ListResponseBody []*WorkoutProgressResponse

// UpdateResponseBody is the type of the "workoutprogress" service "update"
// endpoint HTTP response body.
type UpdateResponseBody struct {
	// Unique ID of the workout progress
	ID string `form:"id" json:"id" xml:"id"`
	// Workout ID
	WorkoutID string `form:"workoutId" json:"workoutId" xml:"workoutId"`
	// User ID
	UserID string `form:"userId" json:"userId" xml:"userId"`
	// Date of the workout progress
	Date string `form:"date" json:"date" xml:"date"`
}

// WorkoutProgressResponse is used to define fields on response body types.
type WorkoutProgressResponse struct {
	// Unique ID of the workout progress
	ID string `form:"id" json:"id" xml:"id"`
	// Workout ID
	WorkoutID string `form:"workoutId" json:"workoutId" xml:"workoutId"`
	// User ID
	UserID string `form:"userId" json:"userId" xml:"userId"`
	// Date of the workout progress
	Date string `form:"date" json:"date" xml:"date"`
}

// NewCreateResponseBody builds the HTTP response body from the result of the
// "create" endpoint of the "workoutprogress" service.
func NewCreateResponseBody(res *workoutprogress.WorkoutProgress) *CreateResponseBody {
	body := &CreateResponseBody{
		ID:        res.ID,
		WorkoutID: res.WorkoutID,
		UserID:    res.UserID,
		Date:      res.Date,
	}
	return body
}

// NewGetResponseBody builds the HTTP response body from the result of the
// "get" endpoint of the "workoutprogress" service.
func NewGetResponseBody(res *workoutprogress.WorkoutProgress) *GetResponseBody {
	body := &GetResponseBody{
		ID:        res.ID,
		WorkoutID: res.WorkoutID,
		UserID:    res.UserID,
		Date:      res.Date,
	}
	return body
}

// NewListResponseBody builds the HTTP response body from the result of the
// "list" endpoint of the "workoutprogress" service.
func NewListResponseBody(res []*workoutprogress.WorkoutProgress) ListResponseBody {
	body := make([]*WorkoutProgressResponse, len(res))
	for i, val := range res {
		body[i] = marshalWorkoutprogressWorkoutProgressToWorkoutProgressResponse(val)
	}
	return body
}

// NewUpdateResponseBody builds the HTTP response body from the result of the
// "update" endpoint of the "workoutprogress" service.
func NewUpdateResponseBody(res *workoutprogress.WorkoutProgress) *UpdateResponseBody {
	body := &UpdateResponseBody{
		ID:        res.ID,
		WorkoutID: res.WorkoutID,
		UserID:    res.UserID,
		Date:      res.Date,
	}
	return body
}

// NewCreateWorkoutProgressPayload builds a workoutprogress service create
// endpoint payload.
func NewCreateWorkoutProgressPayload(body *CreateRequestBody) *workoutprogress.CreateWorkoutProgressPayload {
	v := &workoutprogress.CreateWorkoutProgressPayload{
		WorkoutID: *body.WorkoutID,
		UserID:    *body.UserID,
		Date:      *body.Date,
	}

	return v
}

// NewGetPayload builds a workoutprogress service get endpoint payload.
func NewGetPayload(id string) *workoutprogress.GetPayload {
	v := &workoutprogress.GetPayload{}
	v.ID = id

	return v
}

// NewListPayload builds a workoutprogress service list endpoint payload.
func NewListPayload(limit int, offset int) *workoutprogress.ListPayload {
	v := &workoutprogress.ListPayload{}
	v.Limit = limit
	v.Offset = offset

	return v
}

// NewUpdateWorkoutProgressPayload builds a workoutprogress service update
// endpoint payload.
func NewUpdateWorkoutProgressPayload(body *UpdateRequestBody, id string) *workoutprogress.UpdateWorkoutProgressPayload {
	v := &workoutprogress.UpdateWorkoutProgressPayload{
		Date: *body.Date,
	}
	v.ID = id

	return v
}

// NewDeletePayload builds a workoutprogress service delete endpoint payload.
func NewDeletePayload(id string) *workoutprogress.DeletePayload {
	v := &workoutprogress.DeletePayload{}
	v.ID = id

	return v
}

// ValidateCreateRequestBody runs the validations defined on CreateRequestBody
func ValidateCreateRequestBody(body *CreateRequestBody) (err error) {
	if body.WorkoutID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("workoutId", "body"))
	}
	if body.UserID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("userId", "body"))
	}
	if body.Date == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("date", "body"))
	}
	if body.WorkoutID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.workoutId", *body.WorkoutID, goa.FormatUUID))
	}
	if body.UserID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.userId", *body.UserID, goa.FormatUUID))
	}
	if body.Date != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.date", *body.Date, goa.FormatDateTime))
	}
	return
}

// ValidateUpdateRequestBody runs the validations defined on UpdateRequestBody
func ValidateUpdateRequestBody(body *UpdateRequestBody) (err error) {
	if body.Date == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("date", "body"))
	}
	if body.Date != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.date", *body.Date, goa.FormatDateTime))
	}
	return
}
