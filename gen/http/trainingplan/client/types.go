// Code generated by goa v3.19.1, DO NOT EDIT.
//
// trainingplan HTTP client types
//
// Command:
// $ goa gen be/design

package client

import (
	trainingplan "be/gen/trainingplan"

	goa "goa.design/goa/v3/pkg"
)

// CreateRequestBody is the type of the "trainingplan" service "create"
// endpoint HTTP request body.
type CreateRequestBody struct {
	// Name of the training plan
	Name string `form:"name" json:"name" xml:"name"`
	// Description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Start date
	StartDate string `form:"startDate" json:"startDate" xml:"startDate"`
	// End date
	EndDate string `form:"endDate" json:"endDate" xml:"endDate"`
	// User ID
	UserID string `form:"userId" json:"userId" xml:"userId"`
	// Workout Type ID
	WorkoutTypeID string `form:"workoutTypeId" json:"workoutTypeId" xml:"workoutTypeId"`
}

// UpdateRequestBody is the type of the "trainingplan" service "update"
// endpoint HTTP request body.
type UpdateRequestBody struct {
	// Name of the training plan
	Name string `form:"name" json:"name" xml:"name"`
	// Description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Start date
	StartDate string `form:"startDate" json:"startDate" xml:"startDate"`
	// End date
	EndDate string `form:"endDate" json:"endDate" xml:"endDate"`
	// User ID
	UserID string `form:"userId" json:"userId" xml:"userId"`
	// Workout Type ID
	WorkoutTypeID string `form:"workoutTypeId" json:"workoutTypeId" xml:"workoutTypeId"`
}

// CreateResponseBody is the type of the "trainingplan" service "create"
// endpoint HTTP response body.
type CreateResponseBody struct {
	// Unique ID of the training plan
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Name of the training plan
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Start date
	StartDate *string `form:"startDate,omitempty" json:"startDate,omitempty" xml:"startDate,omitempty"`
	// End date
	EndDate *string `form:"endDate,omitempty" json:"endDate,omitempty" xml:"endDate,omitempty"`
	// User ID
	UserID *string `form:"userId,omitempty" json:"userId,omitempty" xml:"userId,omitempty"`
	// Workout Type ID
	WorkoutTypeID *string `form:"workoutTypeId,omitempty" json:"workoutTypeId,omitempty" xml:"workoutTypeId,omitempty"`
}

// GetResponseBody is the type of the "trainingplan" service "get" endpoint
// HTTP response body.
type GetResponseBody struct {
	// Unique ID of the training plan
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Name of the training plan
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Start date
	StartDate *string `form:"startDate,omitempty" json:"startDate,omitempty" xml:"startDate,omitempty"`
	// End date
	EndDate *string `form:"endDate,omitempty" json:"endDate,omitempty" xml:"endDate,omitempty"`
	// User ID
	UserID *string `form:"userId,omitempty" json:"userId,omitempty" xml:"userId,omitempty"`
	// Workout Type ID
	WorkoutTypeID *string `form:"workoutTypeId,omitempty" json:"workoutTypeId,omitempty" xml:"workoutTypeId,omitempty"`
}

// ListResponseBody is the type of the "trainingplan" service "list" endpoint
// HTTP response body.
type ListResponseBody []*TrainingPlanResponse

// UpdateResponseBody is the type of the "trainingplan" service "update"
// endpoint HTTP response body.
type UpdateResponseBody struct {
	// Unique ID of the training plan
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Name of the training plan
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Start date
	StartDate *string `form:"startDate,omitempty" json:"startDate,omitempty" xml:"startDate,omitempty"`
	// End date
	EndDate *string `form:"endDate,omitempty" json:"endDate,omitempty" xml:"endDate,omitempty"`
	// User ID
	UserID *string `form:"userId,omitempty" json:"userId,omitempty" xml:"userId,omitempty"`
	// Workout Type ID
	WorkoutTypeID *string `form:"workoutTypeId,omitempty" json:"workoutTypeId,omitempty" xml:"workoutTypeId,omitempty"`
}

// TrainingPlanResponse is used to define fields on response body types.
type TrainingPlanResponse struct {
	// Unique ID of the training plan
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Name of the training plan
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Start date
	StartDate *string `form:"startDate,omitempty" json:"startDate,omitempty" xml:"startDate,omitempty"`
	// End date
	EndDate *string `form:"endDate,omitempty" json:"endDate,omitempty" xml:"endDate,omitempty"`
	// User ID
	UserID *string `form:"userId,omitempty" json:"userId,omitempty" xml:"userId,omitempty"`
	// Workout Type ID
	WorkoutTypeID *string `form:"workoutTypeId,omitempty" json:"workoutTypeId,omitempty" xml:"workoutTypeId,omitempty"`
}

// NewCreateRequestBody builds the HTTP request body from the payload of the
// "create" endpoint of the "trainingplan" service.
func NewCreateRequestBody(p *trainingplan.CreateTrainingPlanPayload) *CreateRequestBody {
	body := &CreateRequestBody{
		Name:          p.Name,
		Description:   p.Description,
		StartDate:     p.StartDate,
		EndDate:       p.EndDate,
		UserID:        p.UserID,
		WorkoutTypeID: p.WorkoutTypeID,
	}
	return body
}

// NewUpdateRequestBody builds the HTTP request body from the payload of the
// "update" endpoint of the "trainingplan" service.
func NewUpdateRequestBody(p *trainingplan.UpdateTrainingPlanPayload) *UpdateRequestBody {
	body := &UpdateRequestBody{
		Name:          p.Name,
		Description:   p.Description,
		StartDate:     p.StartDate,
		EndDate:       p.EndDate,
		UserID:        p.UserID,
		WorkoutTypeID: p.WorkoutTypeID,
	}
	return body
}

// NewCreateTrainingPlanCreated builds a "trainingplan" service "create"
// endpoint result from a HTTP "Created" response.
func NewCreateTrainingPlanCreated(body *CreateResponseBody) *trainingplan.TrainingPlan {
	v := &trainingplan.TrainingPlan{
		ID:            *body.ID,
		Name:          *body.Name,
		Description:   body.Description,
		StartDate:     *body.StartDate,
		EndDate:       *body.EndDate,
		UserID:        *body.UserID,
		WorkoutTypeID: *body.WorkoutTypeID,
	}

	return v
}

// NewGetTrainingPlanOK builds a "trainingplan" service "get" endpoint result
// from a HTTP "OK" response.
func NewGetTrainingPlanOK(body *GetResponseBody) *trainingplan.TrainingPlan {
	v := &trainingplan.TrainingPlan{
		ID:            *body.ID,
		Name:          *body.Name,
		Description:   body.Description,
		StartDate:     *body.StartDate,
		EndDate:       *body.EndDate,
		UserID:        *body.UserID,
		WorkoutTypeID: *body.WorkoutTypeID,
	}

	return v
}

// NewListTrainingPlanOK builds a "trainingplan" service "list" endpoint result
// from a HTTP "OK" response.
func NewListTrainingPlanOK(body []*TrainingPlanResponse) []*trainingplan.TrainingPlan {
	v := make([]*trainingplan.TrainingPlan, len(body))
	for i, val := range body {
		v[i] = unmarshalTrainingPlanResponseToTrainingplanTrainingPlan(val)
	}

	return v
}

// NewUpdateTrainingPlanOK builds a "trainingplan" service "update" endpoint
// result from a HTTP "OK" response.
func NewUpdateTrainingPlanOK(body *UpdateResponseBody) *trainingplan.TrainingPlan {
	v := &trainingplan.TrainingPlan{
		ID:            *body.ID,
		Name:          *body.Name,
		Description:   body.Description,
		StartDate:     *body.StartDate,
		EndDate:       *body.EndDate,
		UserID:        *body.UserID,
		WorkoutTypeID: *body.WorkoutTypeID,
	}

	return v
}

// ValidateCreateResponseBody runs the validations defined on CreateResponseBody
func ValidateCreateResponseBody(body *CreateResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.StartDate == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("startDate", "body"))
	}
	if body.EndDate == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("endDate", "body"))
	}
	if body.UserID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("userId", "body"))
	}
	if body.WorkoutTypeID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("workoutTypeId", "body"))
	}
	if body.ID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.id", *body.ID, goa.FormatUUID))
	}
	if body.StartDate != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.startDate", *body.StartDate, goa.FormatDateTime))
	}
	if body.EndDate != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.endDate", *body.EndDate, goa.FormatDateTime))
	}
	if body.UserID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.userId", *body.UserID, goa.FormatUUID))
	}
	if body.WorkoutTypeID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.workoutTypeId", *body.WorkoutTypeID, goa.FormatUUID))
	}
	return
}

// ValidateGetResponseBody runs the validations defined on GetResponseBody
func ValidateGetResponseBody(body *GetResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.StartDate == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("startDate", "body"))
	}
	if body.EndDate == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("endDate", "body"))
	}
	if body.UserID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("userId", "body"))
	}
	if body.WorkoutTypeID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("workoutTypeId", "body"))
	}
	if body.ID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.id", *body.ID, goa.FormatUUID))
	}
	if body.StartDate != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.startDate", *body.StartDate, goa.FormatDateTime))
	}
	if body.EndDate != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.endDate", *body.EndDate, goa.FormatDateTime))
	}
	if body.UserID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.userId", *body.UserID, goa.FormatUUID))
	}
	if body.WorkoutTypeID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.workoutTypeId", *body.WorkoutTypeID, goa.FormatUUID))
	}
	return
}

// ValidateUpdateResponseBody runs the validations defined on UpdateResponseBody
func ValidateUpdateResponseBody(body *UpdateResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.StartDate == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("startDate", "body"))
	}
	if body.EndDate == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("endDate", "body"))
	}
	if body.UserID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("userId", "body"))
	}
	if body.WorkoutTypeID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("workoutTypeId", "body"))
	}
	if body.ID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.id", *body.ID, goa.FormatUUID))
	}
	if body.StartDate != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.startDate", *body.StartDate, goa.FormatDateTime))
	}
	if body.EndDate != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.endDate", *body.EndDate, goa.FormatDateTime))
	}
	if body.UserID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.userId", *body.UserID, goa.FormatUUID))
	}
	if body.WorkoutTypeID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.workoutTypeId", *body.WorkoutTypeID, goa.FormatUUID))
	}
	return
}

// ValidateTrainingPlanResponse runs the validations defined on
// TrainingPlanResponse
func ValidateTrainingPlanResponse(body *TrainingPlanResponse) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.StartDate == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("startDate", "body"))
	}
	if body.EndDate == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("endDate", "body"))
	}
	if body.UserID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("userId", "body"))
	}
	if body.WorkoutTypeID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("workoutTypeId", "body"))
	}
	if body.ID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.id", *body.ID, goa.FormatUUID))
	}
	if body.StartDate != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.startDate", *body.StartDate, goa.FormatDateTime))
	}
	if body.EndDate != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.endDate", *body.EndDate, goa.FormatDateTime))
	}
	if body.UserID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.userId", *body.UserID, goa.FormatUUID))
	}
	if body.WorkoutTypeID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.workoutTypeId", *body.WorkoutTypeID, goa.FormatUUID))
	}
	return
}
