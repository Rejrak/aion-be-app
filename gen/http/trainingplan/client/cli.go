// Code generated by goa v3.19.1, DO NOT EDIT.
//
// trainingplan HTTP client CLI support package
//
// Command:
// $ goa gen be/design

package client

import (
	trainingplan "be/gen/trainingplan"
	"encoding/json"
	"fmt"
	"strconv"

	goa "goa.design/goa/v3/pkg"
)

// BuildCreatePayload builds the payload for the trainingplan create endpoint
// from CLI flags.
func BuildCreatePayload(trainingplanCreateBody string) (*trainingplan.CreateTrainingPlanPayload, error) {
	var err error
	var body CreateRequestBody
	{
		err = json.Unmarshal([]byte(trainingplanCreateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"description\": \"Descrizione del piano di allenamento\",\n      \"endDate\": \"2025-02-28T00:00:00Z\",\n      \"name\": \"Piano di Allenamento\",\n      \"startDate\": \"2025-02-01T00:00:00Z\",\n      \"userId\": \"f47ac10b-58cc-4372-a567-0e02b2c3d479\",\n      \"workoutTypeId\": \"f47ac10b-58cc-4372-a567-0e02b2c3d480\"\n   }'")
		}
		err = goa.MergeErrors(err, goa.ValidateFormat("body.startDate", body.StartDate, goa.FormatDateTime))
		err = goa.MergeErrors(err, goa.ValidateFormat("body.endDate", body.EndDate, goa.FormatDateTime))
		err = goa.MergeErrors(err, goa.ValidateFormat("body.userId", body.UserID, goa.FormatUUID))
		err = goa.MergeErrors(err, goa.ValidateFormat("body.workoutTypeId", body.WorkoutTypeID, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	v := &trainingplan.CreateTrainingPlanPayload{
		Name:          body.Name,
		Description:   body.Description,
		StartDate:     body.StartDate,
		EndDate:       body.EndDate,
		UserID:        body.UserID,
		WorkoutTypeID: body.WorkoutTypeID,
	}

	return v, nil
}

// BuildGetPayload builds the payload for the trainingplan get endpoint from
// CLI flags.
func BuildGetPayload(trainingplanGetID string) (*trainingplan.GetPayload, error) {
	var err error
	var id string
	{
		id = trainingplanGetID
		err = goa.MergeErrors(err, goa.ValidateFormat("id", id, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	v := &trainingplan.GetPayload{}
	v.ID = id

	return v, nil
}

// BuildListPayload builds the payload for the trainingplan list endpoint from
// CLI flags.
func BuildListPayload(trainingplanListLimit string, trainingplanListOffset string) (*trainingplan.ListPayload, error) {
	var err error
	var limit int
	{
		if trainingplanListLimit != "" {
			var v int64
			v, err = strconv.ParseInt(trainingplanListLimit, 10, strconv.IntSize)
			limit = int(v)
			if err != nil {
				return nil, fmt.Errorf("invalid value for limit, must be INT")
			}
			if limit < 1 {
				err = goa.MergeErrors(err, goa.InvalidRangeError("limit", limit, 1, true))
			}
			if limit > 100 {
				err = goa.MergeErrors(err, goa.InvalidRangeError("limit", limit, 100, false))
			}
			if err != nil {
				return nil, err
			}
		}
	}
	var offset int
	{
		if trainingplanListOffset != "" {
			var v int64
			v, err = strconv.ParseInt(trainingplanListOffset, 10, strconv.IntSize)
			offset = int(v)
			if err != nil {
				return nil, fmt.Errorf("invalid value for offset, must be INT")
			}
			if offset < 0 {
				err = goa.MergeErrors(err, goa.InvalidRangeError("offset", offset, 0, true))
			}
			if err != nil {
				return nil, err
			}
		}
	}
	v := &trainingplan.ListPayload{}
	v.Limit = limit
	v.Offset = offset

	return v, nil
}

// BuildUpdatePayload builds the payload for the trainingplan update endpoint
// from CLI flags.
func BuildUpdatePayload(trainingplanUpdateBody string, trainingplanUpdateID string) (*trainingplan.UpdateTrainingPlanPayload, error) {
	var err error
	var body UpdateRequestBody
	{
		err = json.Unmarshal([]byte(trainingplanUpdateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"description\": \"Descrizione aggiornata del piano\",\n      \"endDate\": \"2025-02-28T00:00:00Z\",\n      \"name\": \"Piano di Allenamento Updated\",\n      \"startDate\": \"2025-02-01T00:00:00Z\",\n      \"userId\": \"f47ac10b-58cc-4372-a567-0e02b2c3d479\",\n      \"workoutTypeId\": \"f47ac10b-58cc-4372-a567-0e02b2c3d480\"\n   }'")
		}
		err = goa.MergeErrors(err, goa.ValidateFormat("body.startDate", body.StartDate, goa.FormatDateTime))
		err = goa.MergeErrors(err, goa.ValidateFormat("body.endDate", body.EndDate, goa.FormatDateTime))
		err = goa.MergeErrors(err, goa.ValidateFormat("body.userId", body.UserID, goa.FormatUUID))
		err = goa.MergeErrors(err, goa.ValidateFormat("body.workoutTypeId", body.WorkoutTypeID, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	var id string
	{
		id = trainingplanUpdateID
		err = goa.MergeErrors(err, goa.ValidateFormat("id", id, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	v := &trainingplan.UpdateTrainingPlanPayload{
		Name:          body.Name,
		Description:   body.Description,
		StartDate:     body.StartDate,
		EndDate:       body.EndDate,
		UserID:        body.UserID,
		WorkoutTypeID: body.WorkoutTypeID,
	}
	v.ID = id

	return v, nil
}

// BuildDeletePayload builds the payload for the trainingplan delete endpoint
// from CLI flags.
func BuildDeletePayload(trainingplanDeleteID string) (*trainingplan.DeletePayload, error) {
	var err error
	var id string
	{
		id = trainingplanDeleteID
		err = goa.MergeErrors(err, goa.ValidateFormat("id", id, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	v := &trainingplan.DeletePayload{}
	v.ID = id

	return v, nil
}
