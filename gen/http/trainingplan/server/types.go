// Code generated by goa v3.19.1, DO NOT EDIT.
//
// trainingplan HTTP server types
//
// Command:
// $ goa gen be/design

package server

import (
	trainingplan "be/gen/trainingplan"

	goa "goa.design/goa/v3/pkg"
)

// CreateRequestBody is the type of the "trainingplan" service "create"
// endpoint HTTP request body.
type CreateRequestBody struct {
	// Name of the training plan
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Start date
	StartDate *string `form:"startDate,omitempty" json:"startDate,omitempty" xml:"startDate,omitempty"`
	// End date
	EndDate *string `form:"endDate,omitempty" json:"endDate,omitempty" xml:"endDate,omitempty"`
	// User ID
	UserID *string `form:"userId,omitempty" json:"userId,omitempty" xml:"userId,omitempty"`
	// Workout Type ID
	WorkoutTypeID *string `form:"workoutTypeId,omitempty" json:"workoutTypeId,omitempty" xml:"workoutTypeId,omitempty"`
}

// UpdateRequestBody is the type of the "trainingplan" service "update"
// endpoint HTTP request body.
type UpdateRequestBody struct {
	// Name of the training plan
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Start date
	StartDate *string `form:"startDate,omitempty" json:"startDate,omitempty" xml:"startDate,omitempty"`
	// End date
	EndDate *string `form:"endDate,omitempty" json:"endDate,omitempty" xml:"endDate,omitempty"`
	// User ID
	UserID *string `form:"userId,omitempty" json:"userId,omitempty" xml:"userId,omitempty"`
	// Workout Type ID
	WorkoutTypeID *string `form:"workoutTypeId,omitempty" json:"workoutTypeId,omitempty" xml:"workoutTypeId,omitempty"`
}

// CreateResponseBody is the type of the "trainingplan" service "create"
// endpoint HTTP response body.
type CreateResponseBody struct {
	// Unique ID of the training plan
	ID string `form:"id" json:"id" xml:"id"`
	// Name of the training plan
	Name string `form:"name" json:"name" xml:"name"`
	// Description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Start date
	StartDate string `form:"startDate" json:"startDate" xml:"startDate"`
	// End date
	EndDate string `form:"endDate" json:"endDate" xml:"endDate"`
	// User ID
	UserID string `form:"userId" json:"userId" xml:"userId"`
	// Workout Type ID
	WorkoutTypeID string `form:"workoutTypeId" json:"workoutTypeId" xml:"workoutTypeId"`
}

// GetResponseBody is the type of the "trainingplan" service "get" endpoint
// HTTP response body.
type GetResponseBody struct {
	// Unique ID of the training plan
	ID string `form:"id" json:"id" xml:"id"`
	// Name of the training plan
	Name string `form:"name" json:"name" xml:"name"`
	// Description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Start date
	StartDate string `form:"startDate" json:"startDate" xml:"startDate"`
	// End date
	EndDate string `form:"endDate" json:"endDate" xml:"endDate"`
	// User ID
	UserID string `form:"userId" json:"userId" xml:"userId"`
	// Workout Type ID
	WorkoutTypeID string `form:"workoutTypeId" json:"workoutTypeId" xml:"workoutTypeId"`
}

// ListResponseBody is the type of the "trainingplan" service "list" endpoint
// HTTP response body.
type ListResponseBody []*TrainingPlanResponse

// UpdateResponseBody is the type of the "trainingplan" service "update"
// endpoint HTTP response body.
type UpdateResponseBody struct {
	// Unique ID of the training plan
	ID string `form:"id" json:"id" xml:"id"`
	// Name of the training plan
	Name string `form:"name" json:"name" xml:"name"`
	// Description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Start date
	StartDate string `form:"startDate" json:"startDate" xml:"startDate"`
	// End date
	EndDate string `form:"endDate" json:"endDate" xml:"endDate"`
	// User ID
	UserID string `form:"userId" json:"userId" xml:"userId"`
	// Workout Type ID
	WorkoutTypeID string `form:"workoutTypeId" json:"workoutTypeId" xml:"workoutTypeId"`
}

// TrainingPlanResponse is used to define fields on response body types.
type TrainingPlanResponse struct {
	// Unique ID of the training plan
	ID string `form:"id" json:"id" xml:"id"`
	// Name of the training plan
	Name string `form:"name" json:"name" xml:"name"`
	// Description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Start date
	StartDate string `form:"startDate" json:"startDate" xml:"startDate"`
	// End date
	EndDate string `form:"endDate" json:"endDate" xml:"endDate"`
	// User ID
	UserID string `form:"userId" json:"userId" xml:"userId"`
	// Workout Type ID
	WorkoutTypeID string `form:"workoutTypeId" json:"workoutTypeId" xml:"workoutTypeId"`
}

// NewCreateResponseBody builds the HTTP response body from the result of the
// "create" endpoint of the "trainingplan" service.
func NewCreateResponseBody(res *trainingplan.TrainingPlan) *CreateResponseBody {
	body := &CreateResponseBody{
		ID:            res.ID,
		Name:          res.Name,
		Description:   res.Description,
		StartDate:     res.StartDate,
		EndDate:       res.EndDate,
		UserID:        res.UserID,
		WorkoutTypeID: res.WorkoutTypeID,
	}
	return body
}

// NewGetResponseBody builds the HTTP response body from the result of the
// "get" endpoint of the "trainingplan" service.
func NewGetResponseBody(res *trainingplan.TrainingPlan) *GetResponseBody {
	body := &GetResponseBody{
		ID:            res.ID,
		Name:          res.Name,
		Description:   res.Description,
		StartDate:     res.StartDate,
		EndDate:       res.EndDate,
		UserID:        res.UserID,
		WorkoutTypeID: res.WorkoutTypeID,
	}
	return body
}

// NewListResponseBody builds the HTTP response body from the result of the
// "list" endpoint of the "trainingplan" service.
func NewListResponseBody(res []*trainingplan.TrainingPlan) ListResponseBody {
	body := make([]*TrainingPlanResponse, len(res))
	for i, val := range res {
		body[i] = marshalTrainingplanTrainingPlanToTrainingPlanResponse(val)
	}
	return body
}

// NewUpdateResponseBody builds the HTTP response body from the result of the
// "update" endpoint of the "trainingplan" service.
func NewUpdateResponseBody(res *trainingplan.TrainingPlan) *UpdateResponseBody {
	body := &UpdateResponseBody{
		ID:            res.ID,
		Name:          res.Name,
		Description:   res.Description,
		StartDate:     res.StartDate,
		EndDate:       res.EndDate,
		UserID:        res.UserID,
		WorkoutTypeID: res.WorkoutTypeID,
	}
	return body
}

// NewCreateTrainingPlanPayload builds a trainingplan service create endpoint
// payload.
func NewCreateTrainingPlanPayload(body *CreateRequestBody) *trainingplan.CreateTrainingPlanPayload {
	v := &trainingplan.CreateTrainingPlanPayload{
		Name:          *body.Name,
		Description:   body.Description,
		StartDate:     *body.StartDate,
		EndDate:       *body.EndDate,
		UserID:        *body.UserID,
		WorkoutTypeID: *body.WorkoutTypeID,
	}

	return v
}

// NewGetPayload builds a trainingplan service get endpoint payload.
func NewGetPayload(id string) *trainingplan.GetPayload {
	v := &trainingplan.GetPayload{}
	v.ID = id

	return v
}

// NewListPayload builds a trainingplan service list endpoint payload.
func NewListPayload(limit int, offset int) *trainingplan.ListPayload {
	v := &trainingplan.ListPayload{}
	v.Limit = limit
	v.Offset = offset

	return v
}

// NewUpdateTrainingPlanPayload builds a trainingplan service update endpoint
// payload.
func NewUpdateTrainingPlanPayload(body *UpdateRequestBody, id string) *trainingplan.UpdateTrainingPlanPayload {
	v := &trainingplan.UpdateTrainingPlanPayload{
		Name:          *body.Name,
		Description:   body.Description,
		StartDate:     *body.StartDate,
		EndDate:       *body.EndDate,
		UserID:        *body.UserID,
		WorkoutTypeID: *body.WorkoutTypeID,
	}
	v.ID = id

	return v
}

// NewDeletePayload builds a trainingplan service delete endpoint payload.
func NewDeletePayload(id string) *trainingplan.DeletePayload {
	v := &trainingplan.DeletePayload{}
	v.ID = id

	return v
}

// ValidateCreateRequestBody runs the validations defined on CreateRequestBody
func ValidateCreateRequestBody(body *CreateRequestBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.StartDate == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("startDate", "body"))
	}
	if body.EndDate == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("endDate", "body"))
	}
	if body.UserID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("userId", "body"))
	}
	if body.WorkoutTypeID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("workoutTypeId", "body"))
	}
	if body.StartDate != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.startDate", *body.StartDate, goa.FormatDateTime))
	}
	if body.EndDate != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.endDate", *body.EndDate, goa.FormatDateTime))
	}
	if body.UserID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.userId", *body.UserID, goa.FormatUUID))
	}
	if body.WorkoutTypeID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.workoutTypeId", *body.WorkoutTypeID, goa.FormatUUID))
	}
	return
}

// ValidateUpdateRequestBody runs the validations defined on UpdateRequestBody
func ValidateUpdateRequestBody(body *UpdateRequestBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.StartDate == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("startDate", "body"))
	}
	if body.EndDate == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("endDate", "body"))
	}
	if body.UserID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("userId", "body"))
	}
	if body.WorkoutTypeID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("workoutTypeId", "body"))
	}
	if body.StartDate != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.startDate", *body.StartDate, goa.FormatDateTime))
	}
	if body.EndDate != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.endDate", *body.EndDate, goa.FormatDateTime))
	}
	if body.UserID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.userId", *body.UserID, goa.FormatUUID))
	}
	if body.WorkoutTypeID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.workoutTypeId", *body.WorkoutTypeID, goa.FormatUUID))
	}
	return
}
