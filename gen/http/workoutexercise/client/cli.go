// Code generated by goa v3.19.1, DO NOT EDIT.
//
// workoutexercise HTTP client CLI support package
//
// Command:
// $ goa gen be/design

package client

import (
	workoutexercise "be/gen/workoutexercise"
	"encoding/json"
	"fmt"
	"strconv"

	goa "goa.design/goa/v3/pkg"
)

// BuildCreatePayload builds the payload for the workoutexercise create
// endpoint from CLI flags.
func BuildCreatePayload(workoutexerciseCreateBody string) (*workoutexercise.CreateWorkoutExercisePayload, error) {
	var err error
	var body CreateRequestBody
	{
		err = json.Unmarshal([]byte(workoutexerciseCreateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"duration\": 60,\n      \"exerciseId\": \"f47ac10b-58cc-4372-a567-0e02b2c3d484\",\n      \"notes\": \"Focus on form\",\n      \"repetitions\": 12,\n      \"sets\": 3,\n      \"workoutId\": \"f47ac10b-58cc-4372-a567-0e02b2c3d481\"\n   }'")
		}
		err = goa.MergeErrors(err, goa.ValidateFormat("body.workoutId", body.WorkoutID, goa.FormatUUID))
		err = goa.MergeErrors(err, goa.ValidateFormat("body.exerciseId", body.ExerciseID, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	v := &workoutexercise.CreateWorkoutExercisePayload{
		WorkoutID:   body.WorkoutID,
		ExerciseID:  body.ExerciseID,
		Sets:        body.Sets,
		Repetitions: body.Repetitions,
		Duration:    body.Duration,
		Notes:       body.Notes,
	}

	return v, nil
}

// BuildGetPayload builds the payload for the workoutexercise get endpoint from
// CLI flags.
func BuildGetPayload(workoutexerciseGetID string) (*workoutexercise.GetPayload, error) {
	var err error
	var id string
	{
		id = workoutexerciseGetID
		err = goa.MergeErrors(err, goa.ValidateFormat("id", id, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	v := &workoutexercise.GetPayload{}
	v.ID = id

	return v, nil
}

// BuildListPayload builds the payload for the workoutexercise list endpoint
// from CLI flags.
func BuildListPayload(workoutexerciseListLimit string, workoutexerciseListOffset string) (*workoutexercise.ListPayload, error) {
	var err error
	var limit int
	{
		if workoutexerciseListLimit != "" {
			var v int64
			v, err = strconv.ParseInt(workoutexerciseListLimit, 10, strconv.IntSize)
			limit = int(v)
			if err != nil {
				return nil, fmt.Errorf("invalid value for limit, must be INT")
			}
			if limit < 1 {
				err = goa.MergeErrors(err, goa.InvalidRangeError("limit", limit, 1, true))
			}
			if limit > 100 {
				err = goa.MergeErrors(err, goa.InvalidRangeError("limit", limit, 100, false))
			}
			if err != nil {
				return nil, err
			}
		}
	}
	var offset int
	{
		if workoutexerciseListOffset != "" {
			var v int64
			v, err = strconv.ParseInt(workoutexerciseListOffset, 10, strconv.IntSize)
			offset = int(v)
			if err != nil {
				return nil, fmt.Errorf("invalid value for offset, must be INT")
			}
			if offset < 0 {
				err = goa.MergeErrors(err, goa.InvalidRangeError("offset", offset, 0, true))
			}
			if err != nil {
				return nil, err
			}
		}
	}
	v := &workoutexercise.ListPayload{}
	v.Limit = limit
	v.Offset = offset

	return v, nil
}

// BuildUpdatePayload builds the payload for the workoutexercise update
// endpoint from CLI flags.
func BuildUpdatePayload(workoutexerciseUpdateBody string, workoutexerciseUpdateID string) (*workoutexercise.UpdateWorkoutExercisePayload, error) {
	var err error
	var body UpdateRequestBody
	{
		err = json.Unmarshal([]byte(workoutexerciseUpdateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"duration\": 60,\n      \"notes\": \"Focus on form\",\n      \"repetitions\": 12,\n      \"sets\": 3\n   }'")
		}
	}
	var id string
	{
		id = workoutexerciseUpdateID
		err = goa.MergeErrors(err, goa.ValidateFormat("id", id, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	v := &workoutexercise.UpdateWorkoutExercisePayload{
		Sets:        body.Sets,
		Repetitions: body.Repetitions,
		Duration:    body.Duration,
		Notes:       body.Notes,
	}
	v.ID = id

	return v, nil
}

// BuildDeletePayload builds the payload for the workoutexercise delete
// endpoint from CLI flags.
func BuildDeletePayload(workoutexerciseDeleteID string) (*workoutexercise.DeletePayload, error) {
	var err error
	var id string
	{
		id = workoutexerciseDeleteID
		err = goa.MergeErrors(err, goa.ValidateFormat("id", id, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	v := &workoutexercise.DeletePayload{}
	v.ID = id

	return v, nil
}
