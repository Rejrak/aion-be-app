// Code generated by goa v3.19.1, DO NOT EDIT.
//
// workoutexercise HTTP client types
//
// Command:
// $ goa gen be/design

package client

import (
	workoutexercise "be/gen/workoutexercise"

	goa "goa.design/goa/v3/pkg"
)

// CreateRequestBody is the type of the "workoutexercise" service "create"
// endpoint HTTP request body.
type CreateRequestBody struct {
	// Workout ID
	WorkoutID string `form:"workoutId" json:"workoutId" xml:"workoutId"`
	// Exercise ID
	ExerciseID string `form:"exerciseId" json:"exerciseId" xml:"exerciseId"`
	// Number of sets
	Sets int `form:"sets" json:"sets" xml:"sets"`
	// Number of repetitions
	Repetitions int `form:"repetitions" json:"repetitions" xml:"repetitions"`
	// Duration in seconds
	Duration *int `form:"duration,omitempty" json:"duration,omitempty" xml:"duration,omitempty"`
	// Notes
	Notes *string `form:"notes,omitempty" json:"notes,omitempty" xml:"notes,omitempty"`
}

// UpdateRequestBody is the type of the "workoutexercise" service "update"
// endpoint HTTP request body.
type UpdateRequestBody struct {
	// Number of sets
	Sets int `form:"sets" json:"sets" xml:"sets"`
	// Number of repetitions
	Repetitions int `form:"repetitions" json:"repetitions" xml:"repetitions"`
	// Duration in seconds
	Duration *int `form:"duration,omitempty" json:"duration,omitempty" xml:"duration,omitempty"`
	// Notes
	Notes *string `form:"notes,omitempty" json:"notes,omitempty" xml:"notes,omitempty"`
}

// CreateResponseBody is the type of the "workoutexercise" service "create"
// endpoint HTTP response body.
type CreateResponseBody struct {
	// Unique ID of the workout exercise
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Workout ID
	WorkoutID *string `form:"workoutId,omitempty" json:"workoutId,omitempty" xml:"workoutId,omitempty"`
	// Exercise ID
	ExerciseID *string `form:"exerciseId,omitempty" json:"exerciseId,omitempty" xml:"exerciseId,omitempty"`
	// Number of sets
	Sets *int `form:"sets,omitempty" json:"sets,omitempty" xml:"sets,omitempty"`
	// Number of repetitions
	Repetitions *int `form:"repetitions,omitempty" json:"repetitions,omitempty" xml:"repetitions,omitempty"`
	// Duration in seconds
	Duration *int `form:"duration,omitempty" json:"duration,omitempty" xml:"duration,omitempty"`
	// Notes
	Notes *string `form:"notes,omitempty" json:"notes,omitempty" xml:"notes,omitempty"`
}

// GetResponseBody is the type of the "workoutexercise" service "get" endpoint
// HTTP response body.
type GetResponseBody struct {
	// Unique ID of the workout exercise
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Workout ID
	WorkoutID *string `form:"workoutId,omitempty" json:"workoutId,omitempty" xml:"workoutId,omitempty"`
	// Exercise ID
	ExerciseID *string `form:"exerciseId,omitempty" json:"exerciseId,omitempty" xml:"exerciseId,omitempty"`
	// Number of sets
	Sets *int `form:"sets,omitempty" json:"sets,omitempty" xml:"sets,omitempty"`
	// Number of repetitions
	Repetitions *int `form:"repetitions,omitempty" json:"repetitions,omitempty" xml:"repetitions,omitempty"`
	// Duration in seconds
	Duration *int `form:"duration,omitempty" json:"duration,omitempty" xml:"duration,omitempty"`
	// Notes
	Notes *string `form:"notes,omitempty" json:"notes,omitempty" xml:"notes,omitempty"`
}

// ListResponseBody is the type of the "workoutexercise" service "list"
// endpoint HTTP response body.
type ListResponseBody []*WorkoutExerciseResponse

// UpdateResponseBody is the type of the "workoutexercise" service "update"
// endpoint HTTP response body.
type UpdateResponseBody struct {
	// Unique ID of the workout exercise
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Workout ID
	WorkoutID *string `form:"workoutId,omitempty" json:"workoutId,omitempty" xml:"workoutId,omitempty"`
	// Exercise ID
	ExerciseID *string `form:"exerciseId,omitempty" json:"exerciseId,omitempty" xml:"exerciseId,omitempty"`
	// Number of sets
	Sets *int `form:"sets,omitempty" json:"sets,omitempty" xml:"sets,omitempty"`
	// Number of repetitions
	Repetitions *int `form:"repetitions,omitempty" json:"repetitions,omitempty" xml:"repetitions,omitempty"`
	// Duration in seconds
	Duration *int `form:"duration,omitempty" json:"duration,omitempty" xml:"duration,omitempty"`
	// Notes
	Notes *string `form:"notes,omitempty" json:"notes,omitempty" xml:"notes,omitempty"`
}

// WorkoutExerciseResponse is used to define fields on response body types.
type WorkoutExerciseResponse struct {
	// Unique ID of the workout exercise
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Workout ID
	WorkoutID *string `form:"workoutId,omitempty" json:"workoutId,omitempty" xml:"workoutId,omitempty"`
	// Exercise ID
	ExerciseID *string `form:"exerciseId,omitempty" json:"exerciseId,omitempty" xml:"exerciseId,omitempty"`
	// Number of sets
	Sets *int `form:"sets,omitempty" json:"sets,omitempty" xml:"sets,omitempty"`
	// Number of repetitions
	Repetitions *int `form:"repetitions,omitempty" json:"repetitions,omitempty" xml:"repetitions,omitempty"`
	// Duration in seconds
	Duration *int `form:"duration,omitempty" json:"duration,omitempty" xml:"duration,omitempty"`
	// Notes
	Notes *string `form:"notes,omitempty" json:"notes,omitempty" xml:"notes,omitempty"`
}

// NewCreateRequestBody builds the HTTP request body from the payload of the
// "create" endpoint of the "workoutexercise" service.
func NewCreateRequestBody(p *workoutexercise.CreateWorkoutExercisePayload) *CreateRequestBody {
	body := &CreateRequestBody{
		WorkoutID:   p.WorkoutID,
		ExerciseID:  p.ExerciseID,
		Sets:        p.Sets,
		Repetitions: p.Repetitions,
		Duration:    p.Duration,
		Notes:       p.Notes,
	}
	return body
}

// NewUpdateRequestBody builds the HTTP request body from the payload of the
// "update" endpoint of the "workoutexercise" service.
func NewUpdateRequestBody(p *workoutexercise.UpdateWorkoutExercisePayload) *UpdateRequestBody {
	body := &UpdateRequestBody{
		Sets:        p.Sets,
		Repetitions: p.Repetitions,
		Duration:    p.Duration,
		Notes:       p.Notes,
	}
	return body
}

// NewCreateWorkoutExerciseCreated builds a "workoutexercise" service "create"
// endpoint result from a HTTP "Created" response.
func NewCreateWorkoutExerciseCreated(body *CreateResponseBody) *workoutexercise.WorkoutExercise {
	v := &workoutexercise.WorkoutExercise{
		ID:          *body.ID,
		WorkoutID:   *body.WorkoutID,
		ExerciseID:  *body.ExerciseID,
		Sets:        *body.Sets,
		Repetitions: *body.Repetitions,
		Duration:    body.Duration,
		Notes:       body.Notes,
	}

	return v
}

// NewGetWorkoutExerciseOK builds a "workoutexercise" service "get" endpoint
// result from a HTTP "OK" response.
func NewGetWorkoutExerciseOK(body *GetResponseBody) *workoutexercise.WorkoutExercise {
	v := &workoutexercise.WorkoutExercise{
		ID:          *body.ID,
		WorkoutID:   *body.WorkoutID,
		ExerciseID:  *body.ExerciseID,
		Sets:        *body.Sets,
		Repetitions: *body.Repetitions,
		Duration:    body.Duration,
		Notes:       body.Notes,
	}

	return v
}

// NewListWorkoutExerciseOK builds a "workoutexercise" service "list" endpoint
// result from a HTTP "OK" response.
func NewListWorkoutExerciseOK(body []*WorkoutExerciseResponse) []*workoutexercise.WorkoutExercise {
	v := make([]*workoutexercise.WorkoutExercise, len(body))
	for i, val := range body {
		v[i] = unmarshalWorkoutExerciseResponseToWorkoutexerciseWorkoutExercise(val)
	}

	return v
}

// NewUpdateWorkoutExerciseOK builds a "workoutexercise" service "update"
// endpoint result from a HTTP "OK" response.
func NewUpdateWorkoutExerciseOK(body *UpdateResponseBody) *workoutexercise.WorkoutExercise {
	v := &workoutexercise.WorkoutExercise{
		ID:          *body.ID,
		WorkoutID:   *body.WorkoutID,
		ExerciseID:  *body.ExerciseID,
		Sets:        *body.Sets,
		Repetitions: *body.Repetitions,
		Duration:    body.Duration,
		Notes:       body.Notes,
	}

	return v
}

// ValidateCreateResponseBody runs the validations defined on CreateResponseBody
func ValidateCreateResponseBody(body *CreateResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.WorkoutID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("workoutId", "body"))
	}
	if body.ExerciseID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("exerciseId", "body"))
	}
	if body.Sets == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("sets", "body"))
	}
	if body.Repetitions == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("repetitions", "body"))
	}
	if body.ID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.id", *body.ID, goa.FormatUUID))
	}
	if body.WorkoutID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.workoutId", *body.WorkoutID, goa.FormatUUID))
	}
	if body.ExerciseID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.exerciseId", *body.ExerciseID, goa.FormatUUID))
	}
	return
}

// ValidateGetResponseBody runs the validations defined on GetResponseBody
func ValidateGetResponseBody(body *GetResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.WorkoutID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("workoutId", "body"))
	}
	if body.ExerciseID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("exerciseId", "body"))
	}
	if body.Sets == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("sets", "body"))
	}
	if body.Repetitions == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("repetitions", "body"))
	}
	if body.ID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.id", *body.ID, goa.FormatUUID))
	}
	if body.WorkoutID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.workoutId", *body.WorkoutID, goa.FormatUUID))
	}
	if body.ExerciseID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.exerciseId", *body.ExerciseID, goa.FormatUUID))
	}
	return
}

// ValidateUpdateResponseBody runs the validations defined on UpdateResponseBody
func ValidateUpdateResponseBody(body *UpdateResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.WorkoutID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("workoutId", "body"))
	}
	if body.ExerciseID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("exerciseId", "body"))
	}
	if body.Sets == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("sets", "body"))
	}
	if body.Repetitions == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("repetitions", "body"))
	}
	if body.ID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.id", *body.ID, goa.FormatUUID))
	}
	if body.WorkoutID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.workoutId", *body.WorkoutID, goa.FormatUUID))
	}
	if body.ExerciseID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.exerciseId", *body.ExerciseID, goa.FormatUUID))
	}
	return
}

// ValidateWorkoutExerciseResponse runs the validations defined on
// WorkoutExerciseResponse
func ValidateWorkoutExerciseResponse(body *WorkoutExerciseResponse) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.WorkoutID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("workoutId", "body"))
	}
	if body.ExerciseID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("exerciseId", "body"))
	}
	if body.Sets == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("sets", "body"))
	}
	if body.Repetitions == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("repetitions", "body"))
	}
	if body.ID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.id", *body.ID, goa.FormatUUID))
	}
	if body.WorkoutID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.workoutId", *body.WorkoutID, goa.FormatUUID))
	}
	if body.ExerciseID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.exerciseId", *body.ExerciseID, goa.FormatUUID))
	}
	return
}
