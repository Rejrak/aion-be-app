// Code generated by goa v3.19.1, DO NOT EDIT.
//
// workoutexercise HTTP server types
//
// Command:
// $ goa gen be/design

package server

import (
	workoutexercise "be/gen/workoutexercise"

	goa "goa.design/goa/v3/pkg"
)

// CreateRequestBody is the type of the "workoutexercise" service "create"
// endpoint HTTP request body.
type CreateRequestBody struct {
	// Workout ID
	WorkoutID *string `form:"workoutId,omitempty" json:"workoutId,omitempty" xml:"workoutId,omitempty"`
	// Exercise ID
	ExerciseID *string `form:"exerciseId,omitempty" json:"exerciseId,omitempty" xml:"exerciseId,omitempty"`
	// Number of sets
	Sets *int `form:"sets,omitempty" json:"sets,omitempty" xml:"sets,omitempty"`
	// Number of repetitions
	Repetitions *int `form:"repetitions,omitempty" json:"repetitions,omitempty" xml:"repetitions,omitempty"`
	// Duration in seconds
	Duration *int `form:"duration,omitempty" json:"duration,omitempty" xml:"duration,omitempty"`
	// Notes
	Notes *string `form:"notes,omitempty" json:"notes,omitempty" xml:"notes,omitempty"`
}

// UpdateRequestBody is the type of the "workoutexercise" service "update"
// endpoint HTTP request body.
type UpdateRequestBody struct {
	// Number of sets
	Sets *int `form:"sets,omitempty" json:"sets,omitempty" xml:"sets,omitempty"`
	// Number of repetitions
	Repetitions *int `form:"repetitions,omitempty" json:"repetitions,omitempty" xml:"repetitions,omitempty"`
	// Duration in seconds
	Duration *int `form:"duration,omitempty" json:"duration,omitempty" xml:"duration,omitempty"`
	// Notes
	Notes *string `form:"notes,omitempty" json:"notes,omitempty" xml:"notes,omitempty"`
}

// CreateResponseBody is the type of the "workoutexercise" service "create"
// endpoint HTTP response body.
type CreateResponseBody struct {
	// Unique ID of the workout exercise
	ID string `form:"id" json:"id" xml:"id"`
	// Workout ID
	WorkoutID string `form:"workoutId" json:"workoutId" xml:"workoutId"`
	// Exercise ID
	ExerciseID string `form:"exerciseId" json:"exerciseId" xml:"exerciseId"`
	// Number of sets
	Sets int `form:"sets" json:"sets" xml:"sets"`
	// Number of repetitions
	Repetitions int `form:"repetitions" json:"repetitions" xml:"repetitions"`
	// Duration in seconds
	Duration *int `form:"duration,omitempty" json:"duration,omitempty" xml:"duration,omitempty"`
	// Notes
	Notes *string `form:"notes,omitempty" json:"notes,omitempty" xml:"notes,omitempty"`
}

// GetResponseBody is the type of the "workoutexercise" service "get" endpoint
// HTTP response body.
type GetResponseBody struct {
	// Unique ID of the workout exercise
	ID string `form:"id" json:"id" xml:"id"`
	// Workout ID
	WorkoutID string `form:"workoutId" json:"workoutId" xml:"workoutId"`
	// Exercise ID
	ExerciseID string `form:"exerciseId" json:"exerciseId" xml:"exerciseId"`
	// Number of sets
	Sets int `form:"sets" json:"sets" xml:"sets"`
	// Number of repetitions
	Repetitions int `form:"repetitions" json:"repetitions" xml:"repetitions"`
	// Duration in seconds
	Duration *int `form:"duration,omitempty" json:"duration,omitempty" xml:"duration,omitempty"`
	// Notes
	Notes *string `form:"notes,omitempty" json:"notes,omitempty" xml:"notes,omitempty"`
}

// ListResponseBody is the type of the "workoutexercise" service "list"
// endpoint HTTP response body.
type ListResponseBody []*WorkoutExerciseResponse

// UpdateResponseBody is the type of the "workoutexercise" service "update"
// endpoint HTTP response body.
type UpdateResponseBody struct {
	// Unique ID of the workout exercise
	ID string `form:"id" json:"id" xml:"id"`
	// Workout ID
	WorkoutID string `form:"workoutId" json:"workoutId" xml:"workoutId"`
	// Exercise ID
	ExerciseID string `form:"exerciseId" json:"exerciseId" xml:"exerciseId"`
	// Number of sets
	Sets int `form:"sets" json:"sets" xml:"sets"`
	// Number of repetitions
	Repetitions int `form:"repetitions" json:"repetitions" xml:"repetitions"`
	// Duration in seconds
	Duration *int `form:"duration,omitempty" json:"duration,omitempty" xml:"duration,omitempty"`
	// Notes
	Notes *string `form:"notes,omitempty" json:"notes,omitempty" xml:"notes,omitempty"`
}

// WorkoutExerciseResponse is used to define fields on response body types.
type WorkoutExerciseResponse struct {
	// Unique ID of the workout exercise
	ID string `form:"id" json:"id" xml:"id"`
	// Workout ID
	WorkoutID string `form:"workoutId" json:"workoutId" xml:"workoutId"`
	// Exercise ID
	ExerciseID string `form:"exerciseId" json:"exerciseId" xml:"exerciseId"`
	// Number of sets
	Sets int `form:"sets" json:"sets" xml:"sets"`
	// Number of repetitions
	Repetitions int `form:"repetitions" json:"repetitions" xml:"repetitions"`
	// Duration in seconds
	Duration *int `form:"duration,omitempty" json:"duration,omitempty" xml:"duration,omitempty"`
	// Notes
	Notes *string `form:"notes,omitempty" json:"notes,omitempty" xml:"notes,omitempty"`
}

// NewCreateResponseBody builds the HTTP response body from the result of the
// "create" endpoint of the "workoutexercise" service.
func NewCreateResponseBody(res *workoutexercise.WorkoutExercise) *CreateResponseBody {
	body := &CreateResponseBody{
		ID:          res.ID,
		WorkoutID:   res.WorkoutID,
		ExerciseID:  res.ExerciseID,
		Sets:        res.Sets,
		Repetitions: res.Repetitions,
		Duration:    res.Duration,
		Notes:       res.Notes,
	}
	return body
}

// NewGetResponseBody builds the HTTP response body from the result of the
// "get" endpoint of the "workoutexercise" service.
func NewGetResponseBody(res *workoutexercise.WorkoutExercise) *GetResponseBody {
	body := &GetResponseBody{
		ID:          res.ID,
		WorkoutID:   res.WorkoutID,
		ExerciseID:  res.ExerciseID,
		Sets:        res.Sets,
		Repetitions: res.Repetitions,
		Duration:    res.Duration,
		Notes:       res.Notes,
	}
	return body
}

// NewListResponseBody builds the HTTP response body from the result of the
// "list" endpoint of the "workoutexercise" service.
func NewListResponseBody(res []*workoutexercise.WorkoutExercise) ListResponseBody {
	body := make([]*WorkoutExerciseResponse, len(res))
	for i, val := range res {
		body[i] = marshalWorkoutexerciseWorkoutExerciseToWorkoutExerciseResponse(val)
	}
	return body
}

// NewUpdateResponseBody builds the HTTP response body from the result of the
// "update" endpoint of the "workoutexercise" service.
func NewUpdateResponseBody(res *workoutexercise.WorkoutExercise) *UpdateResponseBody {
	body := &UpdateResponseBody{
		ID:          res.ID,
		WorkoutID:   res.WorkoutID,
		ExerciseID:  res.ExerciseID,
		Sets:        res.Sets,
		Repetitions: res.Repetitions,
		Duration:    res.Duration,
		Notes:       res.Notes,
	}
	return body
}

// NewCreateWorkoutExercisePayload builds a workoutexercise service create
// endpoint payload.
func NewCreateWorkoutExercisePayload(body *CreateRequestBody) *workoutexercise.CreateWorkoutExercisePayload {
	v := &workoutexercise.CreateWorkoutExercisePayload{
		WorkoutID:   *body.WorkoutID,
		ExerciseID:  *body.ExerciseID,
		Sets:        *body.Sets,
		Repetitions: *body.Repetitions,
		Duration:    body.Duration,
		Notes:       body.Notes,
	}

	return v
}

// NewGetPayload builds a workoutexercise service get endpoint payload.
func NewGetPayload(id string) *workoutexercise.GetPayload {
	v := &workoutexercise.GetPayload{}
	v.ID = id

	return v
}

// NewListPayload builds a workoutexercise service list endpoint payload.
func NewListPayload(limit int, offset int) *workoutexercise.ListPayload {
	v := &workoutexercise.ListPayload{}
	v.Limit = limit
	v.Offset = offset

	return v
}

// NewUpdateWorkoutExercisePayload builds a workoutexercise service update
// endpoint payload.
func NewUpdateWorkoutExercisePayload(body *UpdateRequestBody, id string) *workoutexercise.UpdateWorkoutExercisePayload {
	v := &workoutexercise.UpdateWorkoutExercisePayload{
		Sets:        *body.Sets,
		Repetitions: *body.Repetitions,
		Duration:    body.Duration,
		Notes:       body.Notes,
	}
	v.ID = id

	return v
}

// NewDeletePayload builds a workoutexercise service delete endpoint payload.
func NewDeletePayload(id string) *workoutexercise.DeletePayload {
	v := &workoutexercise.DeletePayload{}
	v.ID = id

	return v
}

// ValidateCreateRequestBody runs the validations defined on CreateRequestBody
func ValidateCreateRequestBody(body *CreateRequestBody) (err error) {
	if body.WorkoutID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("workoutId", "body"))
	}
	if body.ExerciseID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("exerciseId", "body"))
	}
	if body.Sets == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("sets", "body"))
	}
	if body.Repetitions == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("repetitions", "body"))
	}
	if body.WorkoutID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.workoutId", *body.WorkoutID, goa.FormatUUID))
	}
	if body.ExerciseID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.exerciseId", *body.ExerciseID, goa.FormatUUID))
	}
	return
}

// ValidateUpdateRequestBody runs the validations defined on UpdateRequestBody
func ValidateUpdateRequestBody(body *UpdateRequestBody) (err error) {
	if body.Sets == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("sets", "body"))
	}
	if body.Repetitions == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("repetitions", "body"))
	}
	return
}
