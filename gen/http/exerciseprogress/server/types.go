// Code generated by goa v3.19.1, DO NOT EDIT.
//
// exerciseprogress HTTP server types
//
// Command:
// $ goa gen be/design

package server

import (
	exerciseprogress "be/gen/exerciseprogress"

	goa "goa.design/goa/v3/pkg"
)

// CreateRequestBody is the type of the "exerciseprogress" service "create"
// endpoint HTTP request body.
type CreateRequestBody struct {
	// Workout Progress ID
	WorkoutProgressID *string `form:"workoutProgressId,omitempty" json:"workoutProgressId,omitempty" xml:"workoutProgressId,omitempty"`
	// Workout Exercise ID
	WorkoutExerciseID *string `form:"workoutExerciseId,omitempty" json:"workoutExerciseId,omitempty" xml:"workoutExerciseId,omitempty"`
	// Actual repetitions performed
	ActualRepetitions *int `form:"actualRepetitions,omitempty" json:"actualRepetitions,omitempty" xml:"actualRepetitions,omitempty"`
	// Actual weight used
	ActualWeight *float32 `form:"actualWeight,omitempty" json:"actualWeight,omitempty" xml:"actualWeight,omitempty"`
	// Actual duration in seconds
	ActualDuration *int `form:"actualDuration,omitempty" json:"actualDuration,omitempty" xml:"actualDuration,omitempty"`
	// Notes
	Notes *string `form:"notes,omitempty" json:"notes,omitempty" xml:"notes,omitempty"`
}

// UpdateRequestBody is the type of the "exerciseprogress" service "update"
// endpoint HTTP request body.
type UpdateRequestBody struct {
	// Actual repetitions performed
	ActualRepetitions *int `form:"actualRepetitions,omitempty" json:"actualRepetitions,omitempty" xml:"actualRepetitions,omitempty"`
	// Actual weight used
	ActualWeight *float32 `form:"actualWeight,omitempty" json:"actualWeight,omitempty" xml:"actualWeight,omitempty"`
	// Actual duration in seconds
	ActualDuration *int `form:"actualDuration,omitempty" json:"actualDuration,omitempty" xml:"actualDuration,omitempty"`
	// Notes
	Notes *string `form:"notes,omitempty" json:"notes,omitempty" xml:"notes,omitempty"`
}

// CreateResponseBody is the type of the "exerciseprogress" service "create"
// endpoint HTTP response body.
type CreateResponseBody struct {
	// Unique ID of the exercise progress
	ID string `form:"id" json:"id" xml:"id"`
	// Workout Progress ID
	WorkoutProgressID string `form:"workoutProgressId" json:"workoutProgressId" xml:"workoutProgressId"`
	// Workout Exercise ID
	WorkoutExerciseID string `form:"workoutExerciseId" json:"workoutExerciseId" xml:"workoutExerciseId"`
	// Actual repetitions performed
	ActualRepetitions int `form:"actualRepetitions" json:"actualRepetitions" xml:"actualRepetitions"`
	// Actual weight used
	ActualWeight *float32 `form:"actualWeight,omitempty" json:"actualWeight,omitempty" xml:"actualWeight,omitempty"`
	// Actual duration in seconds
	ActualDuration *int `form:"actualDuration,omitempty" json:"actualDuration,omitempty" xml:"actualDuration,omitempty"`
	// Notes
	Notes *string `form:"notes,omitempty" json:"notes,omitempty" xml:"notes,omitempty"`
}

// GetResponseBody is the type of the "exerciseprogress" service "get" endpoint
// HTTP response body.
type GetResponseBody struct {
	// Unique ID of the exercise progress
	ID string `form:"id" json:"id" xml:"id"`
	// Workout Progress ID
	WorkoutProgressID string `form:"workoutProgressId" json:"workoutProgressId" xml:"workoutProgressId"`
	// Workout Exercise ID
	WorkoutExerciseID string `form:"workoutExerciseId" json:"workoutExerciseId" xml:"workoutExerciseId"`
	// Actual repetitions performed
	ActualRepetitions int `form:"actualRepetitions" json:"actualRepetitions" xml:"actualRepetitions"`
	// Actual weight used
	ActualWeight *float32 `form:"actualWeight,omitempty" json:"actualWeight,omitempty" xml:"actualWeight,omitempty"`
	// Actual duration in seconds
	ActualDuration *int `form:"actualDuration,omitempty" json:"actualDuration,omitempty" xml:"actualDuration,omitempty"`
	// Notes
	Notes *string `form:"notes,omitempty" json:"notes,omitempty" xml:"notes,omitempty"`
}

// ListResponseBody is the type of the "exerciseprogress" service "list"
// endpoint HTTP response body.
type ListResponseBody []*ExerciseProgressResponse

// UpdateResponseBody is the type of the "exerciseprogress" service "update"
// endpoint HTTP response body.
type UpdateResponseBody struct {
	// Unique ID of the exercise progress
	ID string `form:"id" json:"id" xml:"id"`
	// Workout Progress ID
	WorkoutProgressID string `form:"workoutProgressId" json:"workoutProgressId" xml:"workoutProgressId"`
	// Workout Exercise ID
	WorkoutExerciseID string `form:"workoutExerciseId" json:"workoutExerciseId" xml:"workoutExerciseId"`
	// Actual repetitions performed
	ActualRepetitions int `form:"actualRepetitions" json:"actualRepetitions" xml:"actualRepetitions"`
	// Actual weight used
	ActualWeight *float32 `form:"actualWeight,omitempty" json:"actualWeight,omitempty" xml:"actualWeight,omitempty"`
	// Actual duration in seconds
	ActualDuration *int `form:"actualDuration,omitempty" json:"actualDuration,omitempty" xml:"actualDuration,omitempty"`
	// Notes
	Notes *string `form:"notes,omitempty" json:"notes,omitempty" xml:"notes,omitempty"`
}

// ExerciseProgressResponse is used to define fields on response body types.
type ExerciseProgressResponse struct {
	// Unique ID of the exercise progress
	ID string `form:"id" json:"id" xml:"id"`
	// Workout Progress ID
	WorkoutProgressID string `form:"workoutProgressId" json:"workoutProgressId" xml:"workoutProgressId"`
	// Workout Exercise ID
	WorkoutExerciseID string `form:"workoutExerciseId" json:"workoutExerciseId" xml:"workoutExerciseId"`
	// Actual repetitions performed
	ActualRepetitions int `form:"actualRepetitions" json:"actualRepetitions" xml:"actualRepetitions"`
	// Actual weight used
	ActualWeight *float32 `form:"actualWeight,omitempty" json:"actualWeight,omitempty" xml:"actualWeight,omitempty"`
	// Actual duration in seconds
	ActualDuration *int `form:"actualDuration,omitempty" json:"actualDuration,omitempty" xml:"actualDuration,omitempty"`
	// Notes
	Notes *string `form:"notes,omitempty" json:"notes,omitempty" xml:"notes,omitempty"`
}

// NewCreateResponseBody builds the HTTP response body from the result of the
// "create" endpoint of the "exerciseprogress" service.
func NewCreateResponseBody(res *exerciseprogress.ExerciseProgress) *CreateResponseBody {
	body := &CreateResponseBody{
		ID:                res.ID,
		WorkoutProgressID: res.WorkoutProgressID,
		WorkoutExerciseID: res.WorkoutExerciseID,
		ActualRepetitions: res.ActualRepetitions,
		ActualWeight:      res.ActualWeight,
		ActualDuration:    res.ActualDuration,
		Notes:             res.Notes,
	}
	return body
}

// NewGetResponseBody builds the HTTP response body from the result of the
// "get" endpoint of the "exerciseprogress" service.
func NewGetResponseBody(res *exerciseprogress.ExerciseProgress) *GetResponseBody {
	body := &GetResponseBody{
		ID:                res.ID,
		WorkoutProgressID: res.WorkoutProgressID,
		WorkoutExerciseID: res.WorkoutExerciseID,
		ActualRepetitions: res.ActualRepetitions,
		ActualWeight:      res.ActualWeight,
		ActualDuration:    res.ActualDuration,
		Notes:             res.Notes,
	}
	return body
}

// NewListResponseBody builds the HTTP response body from the result of the
// "list" endpoint of the "exerciseprogress" service.
func NewListResponseBody(res []*exerciseprogress.ExerciseProgress) ListResponseBody {
	body := make([]*ExerciseProgressResponse, len(res))
	for i, val := range res {
		body[i] = marshalExerciseprogressExerciseProgressToExerciseProgressResponse(val)
	}
	return body
}

// NewUpdateResponseBody builds the HTTP response body from the result of the
// "update" endpoint of the "exerciseprogress" service.
func NewUpdateResponseBody(res *exerciseprogress.ExerciseProgress) *UpdateResponseBody {
	body := &UpdateResponseBody{
		ID:                res.ID,
		WorkoutProgressID: res.WorkoutProgressID,
		WorkoutExerciseID: res.WorkoutExerciseID,
		ActualRepetitions: res.ActualRepetitions,
		ActualWeight:      res.ActualWeight,
		ActualDuration:    res.ActualDuration,
		Notes:             res.Notes,
	}
	return body
}

// NewCreateExerciseProgressPayload builds a exerciseprogress service create
// endpoint payload.
func NewCreateExerciseProgressPayload(body *CreateRequestBody) *exerciseprogress.CreateExerciseProgressPayload {
	v := &exerciseprogress.CreateExerciseProgressPayload{
		WorkoutProgressID: *body.WorkoutProgressID,
		WorkoutExerciseID: *body.WorkoutExerciseID,
		ActualRepetitions: *body.ActualRepetitions,
		ActualWeight:      body.ActualWeight,
		ActualDuration:    body.ActualDuration,
		Notes:             body.Notes,
	}

	return v
}

// NewGetPayload builds a exerciseprogress service get endpoint payload.
func NewGetPayload(id string) *exerciseprogress.GetPayload {
	v := &exerciseprogress.GetPayload{}
	v.ID = id

	return v
}

// NewListPayload builds a exerciseprogress service list endpoint payload.
func NewListPayload(limit int, offset int) *exerciseprogress.ListPayload {
	v := &exerciseprogress.ListPayload{}
	v.Limit = limit
	v.Offset = offset

	return v
}

// NewUpdateExerciseProgressPayload builds a exerciseprogress service update
// endpoint payload.
func NewUpdateExerciseProgressPayload(body *UpdateRequestBody, id string) *exerciseprogress.UpdateExerciseProgressPayload {
	v := &exerciseprogress.UpdateExerciseProgressPayload{
		ActualRepetitions: *body.ActualRepetitions,
		ActualWeight:      body.ActualWeight,
		ActualDuration:    body.ActualDuration,
		Notes:             body.Notes,
	}
	v.ID = id

	return v
}

// NewDeletePayload builds a exerciseprogress service delete endpoint payload.
func NewDeletePayload(id string) *exerciseprogress.DeletePayload {
	v := &exerciseprogress.DeletePayload{}
	v.ID = id

	return v
}

// ValidateCreateRequestBody runs the validations defined on CreateRequestBody
func ValidateCreateRequestBody(body *CreateRequestBody) (err error) {
	if body.WorkoutProgressID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("workoutProgressId", "body"))
	}
	if body.WorkoutExerciseID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("workoutExerciseId", "body"))
	}
	if body.ActualRepetitions == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("actualRepetitions", "body"))
	}
	if body.WorkoutProgressID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.workoutProgressId", *body.WorkoutProgressID, goa.FormatUUID))
	}
	if body.WorkoutExerciseID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.workoutExerciseId", *body.WorkoutExerciseID, goa.FormatUUID))
	}
	return
}

// ValidateUpdateRequestBody runs the validations defined on UpdateRequestBody
func ValidateUpdateRequestBody(body *UpdateRequestBody) (err error) {
	if body.ActualRepetitions == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("actualRepetitions", "body"))
	}
	return
}
