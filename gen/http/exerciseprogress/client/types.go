// Code generated by goa v3.19.1, DO NOT EDIT.
//
// exerciseprogress HTTP client types
//
// Command:
// $ goa gen be/design

package client

import (
	exerciseprogress "be/gen/exerciseprogress"

	goa "goa.design/goa/v3/pkg"
)

// CreateRequestBody is the type of the "exerciseprogress" service "create"
// endpoint HTTP request body.
type CreateRequestBody struct {
	// Workout Progress ID
	WorkoutProgressID string `form:"workoutProgressId" json:"workoutProgressId" xml:"workoutProgressId"`
	// Workout Exercise ID
	WorkoutExerciseID string `form:"workoutExerciseId" json:"workoutExerciseId" xml:"workoutExerciseId"`
	// Actual repetitions performed
	ActualRepetitions int `form:"actualRepetitions" json:"actualRepetitions" xml:"actualRepetitions"`
	// Actual weight used
	ActualWeight *float32 `form:"actualWeight,omitempty" json:"actualWeight,omitempty" xml:"actualWeight,omitempty"`
	// Actual duration in seconds
	ActualDuration *int `form:"actualDuration,omitempty" json:"actualDuration,omitempty" xml:"actualDuration,omitempty"`
	// Notes
	Notes *string `form:"notes,omitempty" json:"notes,omitempty" xml:"notes,omitempty"`
}

// UpdateRequestBody is the type of the "exerciseprogress" service "update"
// endpoint HTTP request body.
type UpdateRequestBody struct {
	// Actual repetitions performed
	ActualRepetitions int `form:"actualRepetitions" json:"actualRepetitions" xml:"actualRepetitions"`
	// Actual weight used
	ActualWeight *float32 `form:"actualWeight,omitempty" json:"actualWeight,omitempty" xml:"actualWeight,omitempty"`
	// Actual duration in seconds
	ActualDuration *int `form:"actualDuration,omitempty" json:"actualDuration,omitempty" xml:"actualDuration,omitempty"`
	// Notes
	Notes *string `form:"notes,omitempty" json:"notes,omitempty" xml:"notes,omitempty"`
}

// CreateResponseBody is the type of the "exerciseprogress" service "create"
// endpoint HTTP response body.
type CreateResponseBody struct {
	// Unique ID of the exercise progress
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Workout Progress ID
	WorkoutProgressID *string `form:"workoutProgressId,omitempty" json:"workoutProgressId,omitempty" xml:"workoutProgressId,omitempty"`
	// Workout Exercise ID
	WorkoutExerciseID *string `form:"workoutExerciseId,omitempty" json:"workoutExerciseId,omitempty" xml:"workoutExerciseId,omitempty"`
	// Actual repetitions performed
	ActualRepetitions *int `form:"actualRepetitions,omitempty" json:"actualRepetitions,omitempty" xml:"actualRepetitions,omitempty"`
	// Actual weight used
	ActualWeight *float32 `form:"actualWeight,omitempty" json:"actualWeight,omitempty" xml:"actualWeight,omitempty"`
	// Actual duration in seconds
	ActualDuration *int `form:"actualDuration,omitempty" json:"actualDuration,omitempty" xml:"actualDuration,omitempty"`
	// Notes
	Notes *string `form:"notes,omitempty" json:"notes,omitempty" xml:"notes,omitempty"`
}

// GetResponseBody is the type of the "exerciseprogress" service "get" endpoint
// HTTP response body.
type GetResponseBody struct {
	// Unique ID of the exercise progress
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Workout Progress ID
	WorkoutProgressID *string `form:"workoutProgressId,omitempty" json:"workoutProgressId,omitempty" xml:"workoutProgressId,omitempty"`
	// Workout Exercise ID
	WorkoutExerciseID *string `form:"workoutExerciseId,omitempty" json:"workoutExerciseId,omitempty" xml:"workoutExerciseId,omitempty"`
	// Actual repetitions performed
	ActualRepetitions *int `form:"actualRepetitions,omitempty" json:"actualRepetitions,omitempty" xml:"actualRepetitions,omitempty"`
	// Actual weight used
	ActualWeight *float32 `form:"actualWeight,omitempty" json:"actualWeight,omitempty" xml:"actualWeight,omitempty"`
	// Actual duration in seconds
	ActualDuration *int `form:"actualDuration,omitempty" json:"actualDuration,omitempty" xml:"actualDuration,omitempty"`
	// Notes
	Notes *string `form:"notes,omitempty" json:"notes,omitempty" xml:"notes,omitempty"`
}

// ListResponseBody is the type of the "exerciseprogress" service "list"
// endpoint HTTP response body.
type ListResponseBody []*ExerciseProgressResponse

// UpdateResponseBody is the type of the "exerciseprogress" service "update"
// endpoint HTTP response body.
type UpdateResponseBody struct {
	// Unique ID of the exercise progress
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Workout Progress ID
	WorkoutProgressID *string `form:"workoutProgressId,omitempty" json:"workoutProgressId,omitempty" xml:"workoutProgressId,omitempty"`
	// Workout Exercise ID
	WorkoutExerciseID *string `form:"workoutExerciseId,omitempty" json:"workoutExerciseId,omitempty" xml:"workoutExerciseId,omitempty"`
	// Actual repetitions performed
	ActualRepetitions *int `form:"actualRepetitions,omitempty" json:"actualRepetitions,omitempty" xml:"actualRepetitions,omitempty"`
	// Actual weight used
	ActualWeight *float32 `form:"actualWeight,omitempty" json:"actualWeight,omitempty" xml:"actualWeight,omitempty"`
	// Actual duration in seconds
	ActualDuration *int `form:"actualDuration,omitempty" json:"actualDuration,omitempty" xml:"actualDuration,omitempty"`
	// Notes
	Notes *string `form:"notes,omitempty" json:"notes,omitempty" xml:"notes,omitempty"`
}

// ExerciseProgressResponse is used to define fields on response body types.
type ExerciseProgressResponse struct {
	// Unique ID of the exercise progress
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Workout Progress ID
	WorkoutProgressID *string `form:"workoutProgressId,omitempty" json:"workoutProgressId,omitempty" xml:"workoutProgressId,omitempty"`
	// Workout Exercise ID
	WorkoutExerciseID *string `form:"workoutExerciseId,omitempty" json:"workoutExerciseId,omitempty" xml:"workoutExerciseId,omitempty"`
	// Actual repetitions performed
	ActualRepetitions *int `form:"actualRepetitions,omitempty" json:"actualRepetitions,omitempty" xml:"actualRepetitions,omitempty"`
	// Actual weight used
	ActualWeight *float32 `form:"actualWeight,omitempty" json:"actualWeight,omitempty" xml:"actualWeight,omitempty"`
	// Actual duration in seconds
	ActualDuration *int `form:"actualDuration,omitempty" json:"actualDuration,omitempty" xml:"actualDuration,omitempty"`
	// Notes
	Notes *string `form:"notes,omitempty" json:"notes,omitempty" xml:"notes,omitempty"`
}

// NewCreateRequestBody builds the HTTP request body from the payload of the
// "create" endpoint of the "exerciseprogress" service.
func NewCreateRequestBody(p *exerciseprogress.CreateExerciseProgressPayload) *CreateRequestBody {
	body := &CreateRequestBody{
		WorkoutProgressID: p.WorkoutProgressID,
		WorkoutExerciseID: p.WorkoutExerciseID,
		ActualRepetitions: p.ActualRepetitions,
		ActualWeight:      p.ActualWeight,
		ActualDuration:    p.ActualDuration,
		Notes:             p.Notes,
	}
	return body
}

// NewUpdateRequestBody builds the HTTP request body from the payload of the
// "update" endpoint of the "exerciseprogress" service.
func NewUpdateRequestBody(p *exerciseprogress.UpdateExerciseProgressPayload) *UpdateRequestBody {
	body := &UpdateRequestBody{
		ActualRepetitions: p.ActualRepetitions,
		ActualWeight:      p.ActualWeight,
		ActualDuration:    p.ActualDuration,
		Notes:             p.Notes,
	}
	return body
}

// NewCreateExerciseProgressCreated builds a "exerciseprogress" service
// "create" endpoint result from a HTTP "Created" response.
func NewCreateExerciseProgressCreated(body *CreateResponseBody) *exerciseprogress.ExerciseProgress {
	v := &exerciseprogress.ExerciseProgress{
		ID:                *body.ID,
		WorkoutProgressID: *body.WorkoutProgressID,
		WorkoutExerciseID: *body.WorkoutExerciseID,
		ActualRepetitions: *body.ActualRepetitions,
		ActualWeight:      body.ActualWeight,
		ActualDuration:    body.ActualDuration,
		Notes:             body.Notes,
	}

	return v
}

// NewGetExerciseProgressOK builds a "exerciseprogress" service "get" endpoint
// result from a HTTP "OK" response.
func NewGetExerciseProgressOK(body *GetResponseBody) *exerciseprogress.ExerciseProgress {
	v := &exerciseprogress.ExerciseProgress{
		ID:                *body.ID,
		WorkoutProgressID: *body.WorkoutProgressID,
		WorkoutExerciseID: *body.WorkoutExerciseID,
		ActualRepetitions: *body.ActualRepetitions,
		ActualWeight:      body.ActualWeight,
		ActualDuration:    body.ActualDuration,
		Notes:             body.Notes,
	}

	return v
}

// NewListExerciseProgressOK builds a "exerciseprogress" service "list"
// endpoint result from a HTTP "OK" response.
func NewListExerciseProgressOK(body []*ExerciseProgressResponse) []*exerciseprogress.ExerciseProgress {
	v := make([]*exerciseprogress.ExerciseProgress, len(body))
	for i, val := range body {
		v[i] = unmarshalExerciseProgressResponseToExerciseprogressExerciseProgress(val)
	}

	return v
}

// NewUpdateExerciseProgressOK builds a "exerciseprogress" service "update"
// endpoint result from a HTTP "OK" response.
func NewUpdateExerciseProgressOK(body *UpdateResponseBody) *exerciseprogress.ExerciseProgress {
	v := &exerciseprogress.ExerciseProgress{
		ID:                *body.ID,
		WorkoutProgressID: *body.WorkoutProgressID,
		WorkoutExerciseID: *body.WorkoutExerciseID,
		ActualRepetitions: *body.ActualRepetitions,
		ActualWeight:      body.ActualWeight,
		ActualDuration:    body.ActualDuration,
		Notes:             body.Notes,
	}

	return v
}

// ValidateCreateResponseBody runs the validations defined on CreateResponseBody
func ValidateCreateResponseBody(body *CreateResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.WorkoutProgressID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("workoutProgressId", "body"))
	}
	if body.WorkoutExerciseID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("workoutExerciseId", "body"))
	}
	if body.ActualRepetitions == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("actualRepetitions", "body"))
	}
	if body.ID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.id", *body.ID, goa.FormatUUID))
	}
	if body.WorkoutProgressID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.workoutProgressId", *body.WorkoutProgressID, goa.FormatUUID))
	}
	if body.WorkoutExerciseID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.workoutExerciseId", *body.WorkoutExerciseID, goa.FormatUUID))
	}
	return
}

// ValidateGetResponseBody runs the validations defined on GetResponseBody
func ValidateGetResponseBody(body *GetResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.WorkoutProgressID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("workoutProgressId", "body"))
	}
	if body.WorkoutExerciseID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("workoutExerciseId", "body"))
	}
	if body.ActualRepetitions == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("actualRepetitions", "body"))
	}
	if body.ID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.id", *body.ID, goa.FormatUUID))
	}
	if body.WorkoutProgressID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.workoutProgressId", *body.WorkoutProgressID, goa.FormatUUID))
	}
	if body.WorkoutExerciseID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.workoutExerciseId", *body.WorkoutExerciseID, goa.FormatUUID))
	}
	return
}

// ValidateUpdateResponseBody runs the validations defined on UpdateResponseBody
func ValidateUpdateResponseBody(body *UpdateResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.WorkoutProgressID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("workoutProgressId", "body"))
	}
	if body.WorkoutExerciseID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("workoutExerciseId", "body"))
	}
	if body.ActualRepetitions == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("actualRepetitions", "body"))
	}
	if body.ID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.id", *body.ID, goa.FormatUUID))
	}
	if body.WorkoutProgressID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.workoutProgressId", *body.WorkoutProgressID, goa.FormatUUID))
	}
	if body.WorkoutExerciseID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.workoutExerciseId", *body.WorkoutExerciseID, goa.FormatUUID))
	}
	return
}

// ValidateExerciseProgressResponse runs the validations defined on
// ExerciseProgressResponse
func ValidateExerciseProgressResponse(body *ExerciseProgressResponse) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.WorkoutProgressID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("workoutProgressId", "body"))
	}
	if body.WorkoutExerciseID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("workoutExerciseId", "body"))
	}
	if body.ActualRepetitions == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("actualRepetitions", "body"))
	}
	if body.ID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.id", *body.ID, goa.FormatUUID))
	}
	if body.WorkoutProgressID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.workoutProgressId", *body.WorkoutProgressID, goa.FormatUUID))
	}
	if body.WorkoutExerciseID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.workoutExerciseId", *body.WorkoutExerciseID, goa.FormatUUID))
	}
	return
}
