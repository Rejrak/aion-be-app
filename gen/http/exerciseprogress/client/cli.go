// Code generated by goa v3.19.1, DO NOT EDIT.
//
// exerciseprogress HTTP client CLI support package
//
// Command:
// $ goa gen be/design

package client

import (
	exerciseprogress "be/gen/exerciseprogress"
	"encoding/json"
	"fmt"
	"strconv"

	goa "goa.design/goa/v3/pkg"
)

// BuildCreatePayload builds the payload for the exerciseprogress create
// endpoint from CLI flags.
func BuildCreatePayload(exerciseprogressCreateBody string) (*exerciseprogress.CreateExerciseProgressPayload, error) {
	var err error
	var body CreateRequestBody
	{
		err = json.Unmarshal([]byte(exerciseprogressCreateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"actualDuration\": 60,\n      \"actualRepetitions\": 10,\n      \"actualWeight\": 50,\n      \"notes\": \"Felt strong\",\n      \"workoutExerciseId\": \"f47ac10b-58cc-4372-a567-0e02b2c3d485\",\n      \"workoutProgressId\": \"f47ac10b-58cc-4372-a567-0e02b2c3d486\"\n   }'")
		}
		err = goa.MergeErrors(err, goa.ValidateFormat("body.workoutProgressId", body.WorkoutProgressID, goa.FormatUUID))
		err = goa.MergeErrors(err, goa.ValidateFormat("body.workoutExerciseId", body.WorkoutExerciseID, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	v := &exerciseprogress.CreateExerciseProgressPayload{
		WorkoutProgressID: body.WorkoutProgressID,
		WorkoutExerciseID: body.WorkoutExerciseID,
		ActualRepetitions: body.ActualRepetitions,
		ActualWeight:      body.ActualWeight,
		ActualDuration:    body.ActualDuration,
		Notes:             body.Notes,
	}

	return v, nil
}

// BuildGetPayload builds the payload for the exerciseprogress get endpoint
// from CLI flags.
func BuildGetPayload(exerciseprogressGetID string) (*exerciseprogress.GetPayload, error) {
	var err error
	var id string
	{
		id = exerciseprogressGetID
		err = goa.MergeErrors(err, goa.ValidateFormat("id", id, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	v := &exerciseprogress.GetPayload{}
	v.ID = id

	return v, nil
}

// BuildListPayload builds the payload for the exerciseprogress list endpoint
// from CLI flags.
func BuildListPayload(exerciseprogressListLimit string, exerciseprogressListOffset string) (*exerciseprogress.ListPayload, error) {
	var err error
	var limit int
	{
		if exerciseprogressListLimit != "" {
			var v int64
			v, err = strconv.ParseInt(exerciseprogressListLimit, 10, strconv.IntSize)
			limit = int(v)
			if err != nil {
				return nil, fmt.Errorf("invalid value for limit, must be INT")
			}
			if limit < 1 {
				err = goa.MergeErrors(err, goa.InvalidRangeError("limit", limit, 1, true))
			}
			if limit > 100 {
				err = goa.MergeErrors(err, goa.InvalidRangeError("limit", limit, 100, false))
			}
			if err != nil {
				return nil, err
			}
		}
	}
	var offset int
	{
		if exerciseprogressListOffset != "" {
			var v int64
			v, err = strconv.ParseInt(exerciseprogressListOffset, 10, strconv.IntSize)
			offset = int(v)
			if err != nil {
				return nil, fmt.Errorf("invalid value for offset, must be INT")
			}
			if offset < 0 {
				err = goa.MergeErrors(err, goa.InvalidRangeError("offset", offset, 0, true))
			}
			if err != nil {
				return nil, err
			}
		}
	}
	v := &exerciseprogress.ListPayload{}
	v.Limit = limit
	v.Offset = offset

	return v, nil
}

// BuildUpdatePayload builds the payload for the exerciseprogress update
// endpoint from CLI flags.
func BuildUpdatePayload(exerciseprogressUpdateBody string, exerciseprogressUpdateID string) (*exerciseprogress.UpdateExerciseProgressPayload, error) {
	var err error
	var body UpdateRequestBody
	{
		err = json.Unmarshal([]byte(exerciseprogressUpdateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"actualDuration\": 60,\n      \"actualRepetitions\": 10,\n      \"actualWeight\": 50,\n      \"notes\": \"Felt strong\"\n   }'")
		}
	}
	var id string
	{
		id = exerciseprogressUpdateID
		err = goa.MergeErrors(err, goa.ValidateFormat("id", id, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	v := &exerciseprogress.UpdateExerciseProgressPayload{
		ActualRepetitions: body.ActualRepetitions,
		ActualWeight:      body.ActualWeight,
		ActualDuration:    body.ActualDuration,
		Notes:             body.Notes,
	}
	v.ID = id

	return v, nil
}

// BuildDeletePayload builds the payload for the exerciseprogress delete
// endpoint from CLI flags.
func BuildDeletePayload(exerciseprogressDeleteID string) (*exerciseprogress.DeletePayload, error) {
	var err error
	var id string
	{
		id = exerciseprogressDeleteID
		err = goa.MergeErrors(err, goa.ValidateFormat("id", id, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	v := &exerciseprogress.DeletePayload{}
	v.ID = id

	return v, nil
}
