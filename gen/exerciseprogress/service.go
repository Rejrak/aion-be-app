// Code generated by goa v3.19.1, DO NOT EDIT.
//
// exerciseprogress service
//
// Command:
// $ goa gen be/design

package exerciseprogress

import (
	"context"
)

// Service for managing exercise progress
type Service interface {
	// Create a new exercise progress record
	Create(context.Context, *CreateExerciseProgressPayload) (res *ExerciseProgress, err error)
	// Get an exercise progress record by ID
	Get(context.Context, *GetPayload) (res *ExerciseProgress, err error)
	// List all exercise progress records with pagination
	List(context.Context, *ListPayload) (res []*ExerciseProgress, err error)
	// Update an exercise progress record
	Update(context.Context, *UpdateExerciseProgressPayload) (res *ExerciseProgress, err error)
	// Delete an exercise progress record
	Delete(context.Context, *DeletePayload) (err error)
}

// APIName is the name of the API as defined in the design.
const APIName = "aion_service"

// APIVersion is the version of the API as defined in the design.
const APIVersion = "0.0.1"

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "exerciseprogress"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [5]string{"create", "get", "list", "update", "delete"}

// Body di risposta per la richiesta non valida (400)
type BadRequest struct {
	// Nome dell'errore
	Name string
	// ID dell'errore
	ID string
	// Descrizione dettagliata dell'errore
	Message string
	// Indica se l'errore è temporaneo
	Temporary bool
	// Indica se l'errore è dovuto a un timeout
	Timeout bool
	// Indica se l'errore è dovuto a un problema del server
	Fault bool
}

// CreateExerciseProgressPayload is the payload type of the exerciseprogress
// service create method.
type CreateExerciseProgressPayload struct {
	// Workout Progress ID
	WorkoutProgressID string
	// Workout Exercise ID
	WorkoutExerciseID string
	// Actual repetitions performed
	ActualRepetitions int
	// Actual weight used
	ActualWeight *float32
	// Actual duration in seconds
	ActualDuration *int
	// Notes
	Notes *string
}

// DeletePayload is the payload type of the exerciseprogress service delete
// method.
type DeletePayload struct {
	// Exercise Progress ID
	ID string
}

// ExerciseProgress is the result type of the exerciseprogress service create
// method.
type ExerciseProgress struct {
	// Unique ID of the exercise progress
	ID string
	// Workout Progress ID
	WorkoutProgressID string
	// Workout Exercise ID
	WorkoutExerciseID string
	// Actual repetitions performed
	ActualRepetitions int
	// Actual weight used
	ActualWeight *float32
	// Actual duration in seconds
	ActualDuration *int
	// Notes
	Notes *string
}

// GetPayload is the payload type of the exerciseprogress service get method.
type GetPayload struct {
	// Exercise Progress ID
	ID string
}

// Errore nel server
type InternalServerError struct {
	// Descrizione dell'errore
	Message string
}

// ListPayload is the payload type of the exerciseprogress service list method.
type ListPayload struct {
	// Number of records to return
	Limit int
	// Offset for pagination
	Offset int
}

// Dato non trovato all'interno del sistema
type NotFound struct {
	// Descrizione dell'errore
	Message string
}

// Errore di autenticazione non riuscita
type Unauthorized struct {
	// Descrizione dell'errore
	Message string
}

// UpdateExerciseProgressPayload is the payload type of the exerciseprogress
// service update method.
type UpdateExerciseProgressPayload struct {
	// Exercise Progress ID
	ID string
	// Actual repetitions performed
	ActualRepetitions int
	// Actual weight used
	ActualWeight *float32
	// Actual duration in seconds
	ActualDuration *int
	// Notes
	Notes *string
}

// Error returns an error description.
func (e *BadRequest) Error() string {
	return "Body di risposta per la richiesta non valida (400)"
}

// ErrorName returns "BadRequest".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *BadRequest) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "BadRequest".
func (e *BadRequest) GoaErrorName() string {
	return "badRequest"
}

// Error returns an error description.
func (e *InternalServerError) Error() string {
	return "Errore nel server"
}

// ErrorName returns "InternalServerError".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *InternalServerError) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "InternalServerError".
func (e *InternalServerError) GoaErrorName() string {
	return "internalServerError"
}

// Error returns an error description.
func (e *NotFound) Error() string {
	return "Dato non trovato all'interno del sistema "
}

// ErrorName returns "NotFound".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *NotFound) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "NotFound".
func (e *NotFound) GoaErrorName() string {
	return "notFound"
}

// Error returns an error description.
func (e *Unauthorized) Error() string {
	return "Errore di autenticazione non riuscita"
}

// ErrorName returns "Unauthorized".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *Unauthorized) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "Unauthorized".
func (e *Unauthorized) GoaErrorName() string {
	return "unauthorized"
}
